/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const MBEDTLS_AES_ENCRYPT: u32 = 1;
pub const MBEDTLS_AES_DECRYPT: u32 = 0;
pub const MBEDTLS_ERR_AES_INVALID_KEY_LENGTH: i32 = -32;
pub const MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH: i32 = -34;
pub const MBEDTLS_ERR_AES_BAD_INPUT_DATA: i32 = -33;
pub const MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE: i32 = -35;
pub const MBEDTLS_ERR_AES_HW_ACCEL_FAILED: i32 = -37;
pub const MBEDTLS_AESNI_AES: u32 = 33554432;
pub const MBEDTLS_AESNI_CLMUL: u32 = 2;
pub const MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED: i32 = -25;
pub const MBEDTLS_ARIA_ENCRYPT: u32 = 1;
pub const MBEDTLS_ARIA_DECRYPT: u32 = 0;
pub const MBEDTLS_ARIA_BLOCKSIZE: u32 = 16;
pub const MBEDTLS_ARIA_MAX_ROUNDS: u32 = 16;
pub const MBEDTLS_ARIA_MAX_KEYSIZE: u32 = 32;
pub const MBEDTLS_ERR_ARIA_BAD_INPUT_DATA: i32 = -92;
pub const MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH: i32 = -94;
pub const MBEDTLS_ERR_ARIA_FEATURE_UNAVAILABLE: i32 = -90;
pub const MBEDTLS_ERR_ARIA_HW_ACCEL_FAILED: i32 = -88;
pub const MBEDTLS_ERR_MPI_FILE_IO_ERROR: i32 = -2;
pub const MBEDTLS_ERR_MPI_BAD_INPUT_DATA: i32 = -4;
pub const MBEDTLS_ERR_MPI_INVALID_CHARACTER: i32 = -6;
pub const MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL: i32 = -8;
pub const MBEDTLS_ERR_MPI_NEGATIVE_VALUE: i32 = -10;
pub const MBEDTLS_ERR_MPI_DIVISION_BY_ZERO: i32 = -12;
pub const MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: i32 = -14;
pub const MBEDTLS_ERR_MPI_ALLOC_FAILED: i32 = -16;
pub const MBEDTLS_MPI_MAX_LIMBS: u32 = 10000;
pub const MBEDTLS_MPI_WINDOW_SIZE: u32 = 6;
pub const MBEDTLS_MPI_MAX_SIZE: u32 = 1024;
pub const MBEDTLS_MPI_MAX_BITS: u32 = 8192;
pub const MBEDTLS_MPI_MAX_BITS_SCALE100: u32 = 819200;
pub const MBEDTLS_LN_2_DIV_LN_10_SCALE100: u32 = 332;
pub const MBEDTLS_MPI_RW_BUFFER_SIZE: u32 = 2484;
pub const MBEDTLS_ERR_ASN1_OUT_OF_DATA: i32 = -96;
pub const MBEDTLS_ERR_ASN1_UNEXPECTED_TAG: i32 = -98;
pub const MBEDTLS_ERR_ASN1_INVALID_LENGTH: i32 = -100;
pub const MBEDTLS_ERR_ASN1_LENGTH_MISMATCH: i32 = -102;
pub const MBEDTLS_ERR_ASN1_INVALID_DATA: i32 = -104;
pub const MBEDTLS_ERR_ASN1_ALLOC_FAILED: i32 = -106;
pub const MBEDTLS_ERR_ASN1_BUF_TOO_SMALL: i32 = -108;
pub const MBEDTLS_ASN1_BOOLEAN: u32 = 1;
pub const MBEDTLS_ASN1_INTEGER: u32 = 2;
pub const MBEDTLS_ASN1_BIT_STRING: u32 = 3;
pub const MBEDTLS_ASN1_OCTET_STRING: u32 = 4;
pub const MBEDTLS_ASN1_NULL: u32 = 5;
pub const MBEDTLS_ASN1_OID: u32 = 6;
pub const MBEDTLS_ASN1_ENUMERATED: u32 = 10;
pub const MBEDTLS_ASN1_UTF8_STRING: u32 = 12;
pub const MBEDTLS_ASN1_SEQUENCE: u32 = 16;
pub const MBEDTLS_ASN1_SET: u32 = 17;
pub const MBEDTLS_ASN1_PRINTABLE_STRING: u32 = 19;
pub const MBEDTLS_ASN1_T61_STRING: u32 = 20;
pub const MBEDTLS_ASN1_IA5_STRING: u32 = 22;
pub const MBEDTLS_ASN1_UTC_TIME: u32 = 23;
pub const MBEDTLS_ASN1_GENERALIZED_TIME: u32 = 24;
pub const MBEDTLS_ASN1_UNIVERSAL_STRING: u32 = 28;
pub const MBEDTLS_ASN1_BMP_STRING: u32 = 30;
pub const MBEDTLS_ASN1_PRIMITIVE: u32 = 0;
pub const MBEDTLS_ASN1_CONSTRUCTED: u32 = 32;
pub const MBEDTLS_ASN1_CONTEXT_SPECIFIC: u32 = 128;
pub const MBEDTLS_ASN1_TAG_CLASS_MASK: u32 = 192;
pub const MBEDTLS_ASN1_TAG_PC_MASK: u32 = 32;
pub const MBEDTLS_ASN1_TAG_VALUE_MASK: u32 = 31;
pub const MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL: i32 = -42;
pub const MBEDTLS_ERR_BASE64_INVALID_CHARACTER: i32 = -44;
pub const MBEDTLS_BLOWFISH_ENCRYPT: u32 = 1;
pub const MBEDTLS_BLOWFISH_DECRYPT: u32 = 0;
pub const MBEDTLS_BLOWFISH_MAX_KEY_BITS: u32 = 448;
pub const MBEDTLS_BLOWFISH_MIN_KEY_BITS: u32 = 32;
pub const MBEDTLS_BLOWFISH_ROUNDS: u32 = 16;
pub const MBEDTLS_BLOWFISH_BLOCKSIZE: u32 = 8;
pub const MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA: i32 = -22;
pub const MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH: i32 = -24;
pub const MBEDTLS_ERR_BLOWFISH_HW_ACCEL_FAILED: i32 = -23;
pub const MBEDTLS_CAMELLIA_ENCRYPT: u32 = 1;
pub const MBEDTLS_CAMELLIA_DECRYPT: u32 = 0;
pub const MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA: i32 = -36;
pub const MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH: i32 = -38;
pub const MBEDTLS_ERR_CAMELLIA_HW_ACCEL_FAILED: i32 = -39;
pub const MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE: i32 = -24704;
pub const MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA: i32 = -24832;
pub const MBEDTLS_ERR_CIPHER_ALLOC_FAILED: i32 = -24960;
pub const MBEDTLS_ERR_CIPHER_INVALID_PADDING: i32 = -25088;
pub const MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED: i32 = -25216;
pub const MBEDTLS_ERR_CIPHER_AUTH_FAILED: i32 = -25344;
pub const MBEDTLS_ERR_CIPHER_INVALID_CONTEXT: i32 = -25472;
pub const MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED: i32 = -25600;
pub const MBEDTLS_CIPHER_VARIABLE_IV_LEN: u32 = 1;
pub const MBEDTLS_CIPHER_VARIABLE_KEY_LEN: u32 = 2;
pub const MBEDTLS_MAX_IV_LENGTH: u32 = 16;
pub const MBEDTLS_MAX_BLOCK_LENGTH: u32 = 16;
pub const MBEDTLS_MAX_KEY_LENGTH: u32 = 64;
pub const MBEDTLS_ERR_CCM_BAD_INPUT: i32 = -13;
pub const MBEDTLS_ERR_CCM_AUTH_FAILED: i32 = -15;
pub const MBEDTLS_ERR_CCM_HW_ACCEL_FAILED: i32 = -17;
pub const MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA: i32 = -81;
pub const MBEDTLS_ERR_CHACHA20_FEATURE_UNAVAILABLE: i32 = -83;
pub const MBEDTLS_ERR_CHACHA20_HW_ACCEL_FAILED: i32 = -85;
pub const MBEDTLS_ERR_POLY1305_BAD_INPUT_DATA: i32 = -87;
pub const MBEDTLS_ERR_POLY1305_FEATURE_UNAVAILABLE: i32 = -89;
pub const MBEDTLS_ERR_POLY1305_HW_ACCEL_FAILED: i32 = -91;
pub const MBEDTLS_ERR_CHACHAPOLY_BAD_STATE: i32 = -84;
pub const MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED: i32 = -86;
pub const MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED: i32 = -122;
pub const MBEDTLS_AES_BLOCK_SIZE: u32 = 16;
pub const MBEDTLS_DES3_BLOCK_SIZE: u32 = 8;
pub const MBEDTLS_CIPHER_BLKSIZE_MAX: u32 = 16;
pub const MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED: i32 = -52;
pub const MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG: i32 = -54;
pub const MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG: i32 = -56;
pub const MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR: i32 = -58;
pub const MBEDTLS_CTR_DRBG_BLOCKSIZE: u32 = 16;
pub const MBEDTLS_CTR_DRBG_KEYSIZE: u32 = 32;
pub const MBEDTLS_CTR_DRBG_KEYBITS: u32 = 256;
pub const MBEDTLS_CTR_DRBG_SEEDLEN: u32 = 48;
pub const MBEDTLS_CTR_DRBG_ENTROPY_LEN: u32 = 48;
pub const MBEDTLS_CTR_DRBG_RESEED_INTERVAL: u32 = 10000;
pub const MBEDTLS_CTR_DRBG_MAX_INPUT: u32 = 256;
pub const MBEDTLS_CTR_DRBG_MAX_REQUEST: u32 = 1024;
pub const MBEDTLS_CTR_DRBG_MAX_SEED_INPUT: u32 = 384;
pub const MBEDTLS_CTR_DRBG_PR_OFF: u32 = 0;
pub const MBEDTLS_CTR_DRBG_PR_ON: u32 = 1;
pub const MBEDTLS_CTR_DRBG_ENTROPY_NONCE_LEN: u32 = 0;
pub const MBEDTLS_DES_ENCRYPT: u32 = 1;
pub const MBEDTLS_DES_DECRYPT: u32 = 0;
pub const MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH: i32 = -50;
pub const MBEDTLS_ERR_DES_HW_ACCEL_FAILED: i32 = -51;
pub const MBEDTLS_DES_KEY_SIZE: u32 = 8;
pub const MBEDTLS_ERR_DHM_BAD_INPUT_DATA: i32 = -12416;
pub const MBEDTLS_ERR_DHM_READ_PARAMS_FAILED: i32 = -12544;
pub const MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED: i32 = -12672;
pub const MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED: i32 = -12800;
pub const MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED: i32 = -12928;
pub const MBEDTLS_ERR_DHM_CALC_SECRET_FAILED: i32 = -13056;
pub const MBEDTLS_ERR_DHM_INVALID_FORMAT: i32 = -13184;
pub const MBEDTLS_ERR_DHM_ALLOC_FAILED: i32 = -13312;
pub const MBEDTLS_ERR_DHM_FILE_IO_ERROR: i32 = -13440;
pub const MBEDTLS_ERR_DHM_HW_ACCEL_FAILED: i32 = -13568;
pub const MBEDTLS_ERR_DHM_SET_GROUP_FAILED: i32 = -13696;
pub const MBEDTLS_ERR_ECP_BAD_INPUT_DATA: i32 = -20352;
pub const MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL: i32 = -20224;
pub const MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE: i32 = -20096;
pub const MBEDTLS_ERR_ECP_VERIFY_FAILED: i32 = -19968;
pub const MBEDTLS_ERR_ECP_ALLOC_FAILED: i32 = -19840;
pub const MBEDTLS_ERR_ECP_RANDOM_FAILED: i32 = -19712;
pub const MBEDTLS_ERR_ECP_INVALID_KEY: i32 = -19584;
pub const MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH: i32 = -19456;
pub const MBEDTLS_ERR_ECP_HW_ACCEL_FAILED: i32 = -19328;
pub const MBEDTLS_ERR_ECP_IN_PROGRESS: i32 = -19200;
pub const MBEDTLS_ECP_DP_MAX: u32 = 12;
pub const MBEDTLS_ECP_MAX_BITS: u32 = 521;
pub const MBEDTLS_ECP_MAX_BYTES: u32 = 66;
pub const MBEDTLS_ECP_MAX_PT_LEN: u32 = 133;
pub const MBEDTLS_ECP_WINDOW_SIZE: u32 = 6;
pub const MBEDTLS_ECP_FIXED_POINT_OPTIM: u32 = 1;
pub const MBEDTLS_ECP_PF_UNCOMPRESSED: u32 = 0;
pub const MBEDTLS_ECP_PF_COMPRESSED: u32 = 1;
pub const MBEDTLS_ECP_TLS_NAMED_CURVE: u32 = 3;
pub const MBEDTLS_ECP_TLS_CURVE25519: u32 = 29;
pub const MBEDTLS_X25519_KEY_SIZE_BYTES: u32 = 32;
pub const MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE: i32 = -20608;
pub const MBEDTLS_ERR_MD_BAD_INPUT_DATA: i32 = -20736;
pub const MBEDTLS_ERR_MD_ALLOC_FAILED: i32 = -20864;
pub const MBEDTLS_ERR_MD_FILE_IO_ERROR: i32 = -20992;
pub const MBEDTLS_ERR_MD_HW_ACCEL_FAILED: i32 = -21120;
pub const MBEDTLS_MD_MAX_SIZE: u32 = 64;
pub const MBEDTLS_MD_MAX_BLOCK_SIZE: u32 = 128;
pub const MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED: i32 = -57;
pub const MBEDTLS_ERR_SHA512_BAD_INPUT_DATA: i32 = -117;
pub const MBEDTLS_ERR_ENTROPY_SOURCE_FAILED: i32 = -60;
pub const MBEDTLS_ERR_ENTROPY_MAX_SOURCES: i32 = -62;
pub const MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED: i32 = -64;
pub const MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE: i32 = -61;
pub const MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR: i32 = -63;
pub const MBEDTLS_ENTROPY_MAX_SOURCES: u32 = 20;
pub const MBEDTLS_ENTROPY_MAX_GATHER: u32 = 128;
pub const MBEDTLS_ENTROPY_BLOCK_SIZE: u32 = 64;
pub const MBEDTLS_ENTROPY_MAX_SEED_SIZE: u32 = 1024;
pub const MBEDTLS_ENTROPY_SOURCE_MANUAL: u32 = 20;
pub const MBEDTLS_ENTROPY_SOURCE_STRONG: u32 = 1;
pub const MBEDTLS_ENTROPY_SOURCE_WEAK: u32 = 0;
pub const MBEDTLS_ENTROPY_MIN_PLATFORM: u32 = 32;
pub const MBEDTLS_ENTROPY_MIN_HAVEGE: u32 = 32;
pub const MBEDTLS_ENTROPY_MIN_HARDCLOCK: u32 = 4;
pub const MBEDTLS_ENTROPY_MIN_HARDWARE: u32 = 32;
pub const MBEDTLS_ERR_ERROR_GENERIC_ERROR: i32 = -1;
pub const MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED: i32 = -110;
pub const MBEDTLS_GCM_ENCRYPT: u32 = 1;
pub const MBEDTLS_GCM_DECRYPT: u32 = 0;
pub const MBEDTLS_ERR_GCM_AUTH_FAILED: i32 = -18;
pub const MBEDTLS_ERR_GCM_HW_ACCEL_FAILED: i32 = -19;
pub const MBEDTLS_ERR_GCM_BAD_INPUT: i32 = -20;
pub const MBEDTLS_ERR_HKDF_BAD_INPUT_DATA: i32 = -24448;
pub const MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG: i32 = -3;
pub const MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG: i32 = -5;
pub const MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR: i32 = -7;
pub const MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED: i32 = -9;
pub const MBEDTLS_HMAC_DRBG_RESEED_INTERVAL: u32 = 10000;
pub const MBEDTLS_HMAC_DRBG_MAX_INPUT: u32 = 256;
pub const MBEDTLS_HMAC_DRBG_MAX_REQUEST: u32 = 1024;
pub const MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT: u32 = 384;
pub const MBEDTLS_HMAC_DRBG_PR_OFF: u32 = 0;
pub const MBEDTLS_HMAC_DRBG_PR_ON: u32 = 1;
pub const MBEDTLS_ERR_MD2_HW_ACCEL_FAILED: i32 = -43;
pub const MBEDTLS_ERR_MD4_HW_ACCEL_FAILED: i32 = -45;
pub const MBEDTLS_ERR_MD5_HW_ACCEL_FAILED: i32 = -47;
pub const MBEDTLS_ERR_RSA_BAD_INPUT_DATA: i32 = -16512;
pub const MBEDTLS_ERR_RSA_INVALID_PADDING: i32 = -16640;
pub const MBEDTLS_ERR_RSA_KEY_GEN_FAILED: i32 = -16768;
pub const MBEDTLS_ERR_RSA_KEY_CHECK_FAILED: i32 = -16896;
pub const MBEDTLS_ERR_RSA_PUBLIC_FAILED: i32 = -17024;
pub const MBEDTLS_ERR_RSA_PRIVATE_FAILED: i32 = -17152;
pub const MBEDTLS_ERR_RSA_VERIFY_FAILED: i32 = -17280;
pub const MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE: i32 = -17408;
pub const MBEDTLS_ERR_RSA_RNG_FAILED: i32 = -17536;
pub const MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION: i32 = -17664;
pub const MBEDTLS_ERR_RSA_HW_ACCEL_FAILED: i32 = -17792;
pub const MBEDTLS_RSA_PUBLIC: u32 = 0;
pub const MBEDTLS_RSA_PRIVATE: u32 = 1;
pub const MBEDTLS_RSA_PKCS_V15: u32 = 0;
pub const MBEDTLS_RSA_PKCS_V21: u32 = 1;
pub const MBEDTLS_RSA_SIGN: u32 = 1;
pub const MBEDTLS_RSA_CRYPT: u32 = 2;
pub const MBEDTLS_RSA_SALT_LEN_ANY: i32 = -1;
pub const MBEDTLS_ERR_PK_ALLOC_FAILED: i32 = -16256;
pub const MBEDTLS_ERR_PK_TYPE_MISMATCH: i32 = -16128;
pub const MBEDTLS_ERR_PK_BAD_INPUT_DATA: i32 = -16000;
pub const MBEDTLS_ERR_PK_FILE_IO_ERROR: i32 = -15872;
pub const MBEDTLS_ERR_PK_KEY_INVALID_VERSION: i32 = -15744;
pub const MBEDTLS_ERR_PK_KEY_INVALID_FORMAT: i32 = -15616;
pub const MBEDTLS_ERR_PK_UNKNOWN_PK_ALG: i32 = -15488;
pub const MBEDTLS_ERR_PK_PASSWORD_REQUIRED: i32 = -15360;
pub const MBEDTLS_ERR_PK_PASSWORD_MISMATCH: i32 = -15232;
pub const MBEDTLS_ERR_PK_INVALID_PUBKEY: i32 = -15104;
pub const MBEDTLS_ERR_PK_INVALID_ALG: i32 = -14976;
pub const MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE: i32 = -14848;
pub const MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE: i32 = -14720;
pub const MBEDTLS_ERR_PK_SIG_LEN_MISMATCH: i32 = -14592;
pub const MBEDTLS_ERR_PK_HW_ACCEL_FAILED: i32 = -14464;
pub const MBEDTLS_PK_SIGNATURE_MAX_SIZE: u32 = 0;
pub const MBEDTLS_PK_DEBUG_MAX_ITEMS: u32 = 3;
pub const MBEDTLS_ERR_OID_NOT_FOUND: i32 = -46;
pub const MBEDTLS_ERR_OID_BUF_TOO_SMALL: i32 = -11;
pub const MBEDTLS_OID_X509_EXT_AUTHORITY_KEY_IDENTIFIER: u32 = 1;
pub const MBEDTLS_OID_X509_EXT_SUBJECT_KEY_IDENTIFIER: u32 = 2;
pub const MBEDTLS_OID_X509_EXT_KEY_USAGE: u32 = 4;
pub const MBEDTLS_OID_X509_EXT_CERTIFICATE_POLICIES: u32 = 8;
pub const MBEDTLS_OID_X509_EXT_POLICY_MAPPINGS: u32 = 16;
pub const MBEDTLS_OID_X509_EXT_SUBJECT_ALT_NAME: u32 = 32;
pub const MBEDTLS_OID_X509_EXT_ISSUER_ALT_NAME: u32 = 64;
pub const MBEDTLS_OID_X509_EXT_SUBJECT_DIRECTORY_ATTRS: u32 = 128;
pub const MBEDTLS_OID_X509_EXT_BASIC_CONSTRAINTS: u32 = 256;
pub const MBEDTLS_OID_X509_EXT_NAME_CONSTRAINTS: u32 = 512;
pub const MBEDTLS_OID_X509_EXT_POLICY_CONSTRAINTS: u32 = 1024;
pub const MBEDTLS_OID_X509_EXT_EXTENDED_KEY_USAGE: u32 = 2048;
pub const MBEDTLS_OID_X509_EXT_CRL_DISTRIBUTION_POINTS: u32 = 4096;
pub const MBEDTLS_OID_X509_EXT_INIHIBIT_ANYPOLICY: u32 = 8192;
pub const MBEDTLS_OID_X509_EXT_FRESHEST_CRL: u32 = 16384;
pub const MBEDTLS_OID_X509_EXT_NS_CERT_TYPE: u32 = 65536;
pub const MBEDTLS_OID_ISO_MEMBER_BODIES: &'static [u8; 2usize] = b"*\0";
pub const MBEDTLS_OID_ISO_IDENTIFIED_ORG: &'static [u8; 2usize] = b"+\0";
pub const MBEDTLS_OID_ISO_CCITT_DS: &'static [u8; 2usize] = b"U\0";
pub const MBEDTLS_OID_ISO_ITU_COUNTRY: &'static [u8; 2usize] = b"`\0";
pub const MBEDTLS_OID_COUNTRY_US: [u8; 3usize] = [134u8, 72u8, 0u8];
pub const MBEDTLS_OID_ORG_RSA_DATA_SECURITY: [u8; 4usize] = [134u8, 247u8, 13u8, 0u8];
pub const MBEDTLS_OID_RSA_COMPANY: [u8; 7usize] = [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 0u8];
pub const MBEDTLS_OID_ORG_ANSI_X9_62: [u8; 3usize] = [206u8, 61u8, 0u8];
pub const MBEDTLS_OID_ANSI_X9_62: [u8; 6usize] = [42u8, 134u8, 72u8, 206u8, 61u8, 0u8];
pub const MBEDTLS_OID_ORG_DOD: &'static [u8; 2usize] = b"\x06\0";
pub const MBEDTLS_OID_ORG_OIW: &'static [u8; 2usize] = b"\x0E\0";
pub const MBEDTLS_OID_OIW_SECSIG: &'static [u8; 3usize] = b"\x0E\x03\0";
pub const MBEDTLS_OID_OIW_SECSIG_ALG: &'static [u8; 4usize] = b"\x0E\x03\x02\0";
pub const MBEDTLS_OID_OIW_SECSIG_SHA1: &'static [u8; 5usize] = b"\x0E\x03\x02\x1A\0";
pub const MBEDTLS_OID_ORG_CERTICOM: [u8; 3usize] = [129u8, 4u8, 0u8];
pub const MBEDTLS_OID_CERTICOM: [u8; 4usize] = [43u8, 129u8, 4u8, 0u8];
pub const MBEDTLS_OID_ORG_TELETRUST: &'static [u8; 2usize] = b"$\0";
pub const MBEDTLS_OID_TELETRUST: &'static [u8; 3usize] = b"+$\0";
pub const MBEDTLS_OID_ORGANIZATION: &'static [u8; 2usize] = b"\x01\0";
pub const MBEDTLS_OID_ISO_ITU_US_ORG: [u8; 5usize] = [96u8, 134u8, 72u8, 1u8, 0u8];
pub const MBEDTLS_OID_ORG_GOV: &'static [u8; 2usize] = b"e\0";
pub const MBEDTLS_OID_GOV: [u8; 6usize] = [96u8, 134u8, 72u8, 1u8, 101u8, 0u8];
pub const MBEDTLS_OID_ORG_NETSCAPE: [u8; 4usize] = [134u8, 248u8, 66u8, 0u8];
pub const MBEDTLS_OID_NETSCAPE: [u8; 8usize] = [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 0u8];
pub const MBEDTLS_OID_ID_CE: &'static [u8; 3usize] = b"U\x1D\0";
pub const MBEDTLS_OID_NIST_ALG: [u8; 8usize] = [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 0u8];
pub const MBEDTLS_OID_INTERNET: &'static [u8; 4usize] = b"+\x06\x01\0";
pub const MBEDTLS_OID_PKIX: &'static [u8; 7usize] = b"+\x06\x01\x05\x05\x07\0";
pub const MBEDTLS_OID_AT: &'static [u8; 3usize] = b"U\x04\0";
pub const MBEDTLS_OID_AT_CN: &'static [u8; 4usize] = b"U\x04\x03\0";
pub const MBEDTLS_OID_AT_SUR_NAME: &'static [u8; 4usize] = b"U\x04\x04\0";
pub const MBEDTLS_OID_AT_SERIAL_NUMBER: &'static [u8; 4usize] = b"U\x04\x05\0";
pub const MBEDTLS_OID_AT_COUNTRY: &'static [u8; 4usize] = b"U\x04\x06\0";
pub const MBEDTLS_OID_AT_LOCALITY: &'static [u8; 4usize] = b"U\x04\x07\0";
pub const MBEDTLS_OID_AT_STATE: &'static [u8; 4usize] = b"U\x04\x08\0";
pub const MBEDTLS_OID_AT_ORGANIZATION: &'static [u8; 4usize] = b"U\x04\n\0";
pub const MBEDTLS_OID_AT_ORG_UNIT: &'static [u8; 4usize] = b"U\x04\x0B\0";
pub const MBEDTLS_OID_AT_TITLE: &'static [u8; 4usize] = b"U\x04\x0C\0";
pub const MBEDTLS_OID_AT_POSTAL_ADDRESS: &'static [u8; 4usize] = b"U\x04\x10\0";
pub const MBEDTLS_OID_AT_POSTAL_CODE: &'static [u8; 4usize] = b"U\x04\x11\0";
pub const MBEDTLS_OID_AT_GIVEN_NAME: &'static [u8; 4usize] = b"U\x04*\0";
pub const MBEDTLS_OID_AT_INITIALS: &'static [u8; 4usize] = b"U\x04+\0";
pub const MBEDTLS_OID_AT_GENERATION_QUALIFIER: &'static [u8; 4usize] = b"U\x04,\0";
pub const MBEDTLS_OID_AT_UNIQUE_IDENTIFIER: &'static [u8; 4usize] = b"U\x04-\0";
pub const MBEDTLS_OID_AT_DN_QUALIFIER: &'static [u8; 4usize] = b"U\x04.\0";
pub const MBEDTLS_OID_AT_PSEUDONYM: &'static [u8; 4usize] = b"U\x04A\0";
pub const MBEDTLS_OID_DOMAIN_COMPONENT: [u8; 11usize] = [
    9u8, 146u8, 38u8, 137u8, 147u8, 242u8, 44u8, 100u8, 1u8, 25u8, 0u8,
];
pub const MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER: &'static [u8; 4usize] = b"U\x1D#\0";
pub const MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER: &'static [u8; 4usize] = b"U\x1D\x0E\0";
pub const MBEDTLS_OID_KEY_USAGE: &'static [u8; 4usize] = b"U\x1D\x0F\0";
pub const MBEDTLS_OID_CERTIFICATE_POLICIES: &'static [u8; 4usize] = b"U\x1D \0";
pub const MBEDTLS_OID_POLICY_MAPPINGS: &'static [u8; 4usize] = b"U\x1D!\0";
pub const MBEDTLS_OID_SUBJECT_ALT_NAME: &'static [u8; 4usize] = b"U\x1D\x11\0";
pub const MBEDTLS_OID_ISSUER_ALT_NAME: &'static [u8; 4usize] = b"U\x1D\x12\0";
pub const MBEDTLS_OID_SUBJECT_DIRECTORY_ATTRS: &'static [u8; 4usize] = b"U\x1D\t\0";
pub const MBEDTLS_OID_BASIC_CONSTRAINTS: &'static [u8; 4usize] = b"U\x1D\x13\0";
pub const MBEDTLS_OID_NAME_CONSTRAINTS: &'static [u8; 4usize] = b"U\x1D\x1E\0";
pub const MBEDTLS_OID_POLICY_CONSTRAINTS: &'static [u8; 4usize] = b"U\x1D$\0";
pub const MBEDTLS_OID_EXTENDED_KEY_USAGE: &'static [u8; 4usize] = b"U\x1D%\0";
pub const MBEDTLS_OID_CRL_DISTRIBUTION_POINTS: &'static [u8; 4usize] = b"U\x1D\x1F\0";
pub const MBEDTLS_OID_INIHIBIT_ANYPOLICY: &'static [u8; 4usize] = b"U\x1D6\0";
pub const MBEDTLS_OID_FRESHEST_CRL: &'static [u8; 4usize] = b"U\x1D.\0";
pub const MBEDTLS_OID_ANY_POLICY: &'static [u8; 5usize] = b"U\x1D \0\0";
pub const MBEDTLS_OID_NS_CERT: [u8; 9usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 0u8];
pub const MBEDTLS_OID_NS_CERT_TYPE: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 1u8, 0u8];
pub const MBEDTLS_OID_NS_BASE_URL: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 2u8, 0u8];
pub const MBEDTLS_OID_NS_REVOCATION_URL: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 3u8, 0u8];
pub const MBEDTLS_OID_NS_CA_REVOCATION_URL: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 4u8, 0u8];
pub const MBEDTLS_OID_NS_RENEWAL_URL: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 7u8, 0u8];
pub const MBEDTLS_OID_NS_CA_POLICY_URL: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 8u8, 0u8];
pub const MBEDTLS_OID_NS_SSL_SERVER_NAME: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 12u8, 0u8];
pub const MBEDTLS_OID_NS_COMMENT: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 1u8, 13u8, 0u8];
pub const MBEDTLS_OID_NS_DATA_TYPE: [u8; 9usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 2u8, 0u8];
pub const MBEDTLS_OID_NS_CERT_SEQUENCE: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 134u8, 248u8, 66u8, 2u8, 5u8, 0u8];
pub const MBEDTLS_OID_PRIVATE_KEY_USAGE_PERIOD: &'static [u8; 4usize] = b"U\x1D\x10\0";
pub const MBEDTLS_OID_CRL_NUMBER: &'static [u8; 4usize] = b"U\x1D\x14\0";
pub const MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE: &'static [u8; 5usize] = b"U\x1D%\0\0";
pub const MBEDTLS_OID_KP: &'static [u8; 8usize] = b"+\x06\x01\x05\x05\x07\x03\0";
pub const MBEDTLS_OID_SERVER_AUTH: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x03\x01\0";
pub const MBEDTLS_OID_CLIENT_AUTH: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x03\x02\0";
pub const MBEDTLS_OID_CODE_SIGNING: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x03\x03\0";
pub const MBEDTLS_OID_EMAIL_PROTECTION: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x03\x04\0";
pub const MBEDTLS_OID_TIME_STAMPING: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x03\x08\0";
pub const MBEDTLS_OID_OCSP_SIGNING: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x03\t\0";
pub const MBEDTLS_OID_WISUN_FAN: [u8; 10usize] =
    [43u8, 6u8, 1u8, 4u8, 1u8, 130u8, 228u8, 37u8, 1u8, 0u8];
pub const MBEDTLS_OID_ON: &'static [u8; 8usize] = b"+\x06\x01\x05\x05\x07\x08\0";
pub const MBEDTLS_OID_ON_HW_MODULE_NAME: &'static [u8; 9usize] = b"+\x06\x01\x05\x05\x07\x08\x04\0";
pub const MBEDTLS_OID_PKCS: [u8; 8usize] = [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 0u8];
pub const MBEDTLS_OID_PKCS1: [u8; 9usize] = [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 0u8];
pub const MBEDTLS_OID_PKCS5: [u8; 9usize] = [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 0u8];
pub const MBEDTLS_OID_PKCS9: [u8; 9usize] = [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 9u8, 0u8];
pub const MBEDTLS_OID_PKCS12: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 0u8];
pub const MBEDTLS_OID_PKCS1_RSA: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 1u8, 0u8];
pub const MBEDTLS_OID_PKCS1_MD2: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 2u8, 0u8];
pub const MBEDTLS_OID_PKCS1_MD4: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 3u8, 0u8];
pub const MBEDTLS_OID_PKCS1_MD5: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 4u8, 0u8];
pub const MBEDTLS_OID_PKCS1_SHA1: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 5u8, 0u8];
pub const MBEDTLS_OID_PKCS1_SHA224: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 14u8, 0u8];
pub const MBEDTLS_OID_PKCS1_SHA256: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 11u8, 0u8];
pub const MBEDTLS_OID_PKCS1_SHA384: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 12u8, 0u8];
pub const MBEDTLS_OID_PKCS1_SHA512: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 13u8, 0u8];
pub const MBEDTLS_OID_RSA_SHA_OBS: &'static [u8; 6usize] = b"+\x0E\x03\x02\x1D\0";
pub const MBEDTLS_OID_PKCS9_EMAIL: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 9u8, 1u8, 0u8];
pub const MBEDTLS_OID_RSASSA_PSS: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 10u8, 0u8];
pub const MBEDTLS_OID_MGF1: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 1u8, 8u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_MD2: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 2u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_MD4: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 4u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_MD5: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 5u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_SHA1: &'static [u8; 6usize] = b"+\x0E\x03\x02\x1A\0";
pub const MBEDTLS_OID_DIGEST_ALG_SHA224: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 2u8, 4u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_SHA256: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 2u8, 1u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_SHA384: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 2u8, 2u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_SHA512: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 2u8, 3u8, 0u8];
pub const MBEDTLS_OID_DIGEST_ALG_RIPEMD160: &'static [u8; 6usize] = b"+$\x03\x02\x01\0";
pub const MBEDTLS_OID_HMAC_SHA1: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 7u8, 0u8];
pub const MBEDTLS_OID_HMAC_SHA224: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 8u8, 0u8];
pub const MBEDTLS_OID_HMAC_SHA256: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 9u8, 0u8];
pub const MBEDTLS_OID_HMAC_SHA384: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 10u8, 0u8];
pub const MBEDTLS_OID_HMAC_SHA512: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 2u8, 11u8, 0u8];
pub const MBEDTLS_OID_DES_CBC: &'static [u8; 6usize] = b"+\x0E\x03\x02\x07\0";
pub const MBEDTLS_OID_DES_EDE3_CBC: [u8; 9usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 3u8, 7u8, 0u8];
pub const MBEDTLS_OID_AES: [u8; 9usize] = [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 0u8];
pub const MBEDTLS_OID_AES128_KW: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 5u8, 0u8];
pub const MBEDTLS_OID_AES128_KWP: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 8u8, 0u8];
pub const MBEDTLS_OID_AES192_KW: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 25u8, 0u8];
pub const MBEDTLS_OID_AES192_KWP: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 28u8, 0u8];
pub const MBEDTLS_OID_AES256_KW: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 45u8, 0u8];
pub const MBEDTLS_OID_AES256_KWP: [u8; 10usize] =
    [96u8, 134u8, 72u8, 1u8, 101u8, 3u8, 4u8, 1u8, 48u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBKDF2: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 12u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBES2: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 13u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBMAC1: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 14u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBE_MD2_DES_CBC: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 1u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBE_MD2_RC2_CBC: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 4u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBE_MD5_DES_CBC: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 3u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBE_MD5_RC2_CBC: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 6u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBE_SHA1_DES_CBC: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 10u8, 0u8];
pub const MBEDTLS_OID_PKCS5_PBE_SHA1_RC2_CBC: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 5u8, 11u8, 0u8];
pub const MBEDTLS_OID_PKCS9_CSR_EXT_REQ: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 9u8, 14u8, 0u8];
pub const MBEDTLS_OID_PKCS12_PBE: [u8; 10usize] =
    [42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 0u8];
pub const MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128: [u8; 11usize] = [
    42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 1u8, 0u8,
];
pub const MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_40: [u8; 11usize] = [
    42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 2u8, 0u8,
];
pub const MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC: [u8; 11usize] = [
    42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 3u8, 0u8,
];
pub const MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC: [u8; 11usize] = [
    42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 4u8, 0u8,
];
pub const MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_128_CBC: [u8; 11usize] = [
    42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 5u8, 0u8,
];
pub const MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_40_CBC: [u8; 11usize] = [
    42u8, 134u8, 72u8, 134u8, 247u8, 13u8, 1u8, 12u8, 1u8, 6u8, 0u8,
];
pub const MBEDTLS_OID_EC_ALG_UNRESTRICTED: [u8; 8usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 2u8, 1u8, 0u8];
pub const MBEDTLS_OID_EC_ALG_ECDH: [u8; 6usize] = [43u8, 129u8, 4u8, 1u8, 12u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP192R1: [u8; 9usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 3u8, 1u8, 1u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP224R1: [u8; 6usize] = [43u8, 129u8, 4u8, 0u8, 33u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP256R1: [u8; 9usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 3u8, 1u8, 7u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP384R1: [u8; 6usize] = [43u8, 129u8, 4u8, 0u8, 34u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP521R1: [u8; 6usize] = [43u8, 129u8, 4u8, 0u8, 35u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP192K1: [u8; 6usize] = [43u8, 129u8, 4u8, 0u8, 31u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP224K1: [u8; 6usize] = [43u8, 129u8, 4u8, 0u8, 32u8, 0u8];
pub const MBEDTLS_OID_EC_GRP_SECP256K1: [u8; 6usize] = [43u8, 129u8, 4u8, 0u8, 10u8, 0u8];
pub const MBEDTLS_OID_EC_BRAINPOOL_V1: &'static [u8; 9usize] = b"+$\x03\x03\x02\x08\x01\x01\0";
pub const MBEDTLS_OID_EC_GRP_BP256R1: &'static [u8; 10usize] = b"+$\x03\x03\x02\x08\x01\x01\x07\0";
pub const MBEDTLS_OID_EC_GRP_BP384R1: &'static [u8; 10usize] = b"+$\x03\x03\x02\x08\x01\x01\x0B\0";
pub const MBEDTLS_OID_EC_GRP_BP512R1: &'static [u8; 10usize] = b"+$\x03\x03\x02\x08\x01\x01\r\0";
pub const MBEDTLS_OID_ANSI_X9_62_FIELD_TYPE: [u8; 7usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 1u8, 0u8];
pub const MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD: [u8; 8usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 1u8, 1u8, 0u8];
pub const MBEDTLS_OID_ANSI_X9_62_SIG: [u8; 7usize] = [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 0u8];
pub const MBEDTLS_OID_ANSI_X9_62_SIG_SHA2: [u8; 8usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 3u8, 0u8];
pub const MBEDTLS_OID_ECDSA_SHA1: [u8; 8usize] = [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 1u8, 0u8];
pub const MBEDTLS_OID_ECDSA_SHA224: [u8; 9usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 3u8, 1u8, 0u8];
pub const MBEDTLS_OID_ECDSA_SHA256: [u8; 9usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 3u8, 2u8, 0u8];
pub const MBEDTLS_OID_ECDSA_SHA384: [u8; 9usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 3u8, 3u8, 0u8];
pub const MBEDTLS_OID_ECDSA_SHA512: [u8; 9usize] =
    [42u8, 134u8, 72u8, 206u8, 61u8, 4u8, 3u8, 4u8, 0u8];
pub const MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED: i32 = -48;
pub const MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT: i32 = -4224;
pub const MBEDTLS_ERR_PEM_INVALID_DATA: i32 = -4352;
pub const MBEDTLS_ERR_PEM_ALLOC_FAILED: i32 = -4480;
pub const MBEDTLS_ERR_PEM_INVALID_ENC_IV: i32 = -4608;
pub const MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG: i32 = -4736;
pub const MBEDTLS_ERR_PEM_PASSWORD_REQUIRED: i32 = -4864;
pub const MBEDTLS_ERR_PEM_PASSWORD_MISMATCH: i32 = -4992;
pub const MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE: i32 = -5120;
pub const MBEDTLS_ERR_PEM_BAD_INPUT_DATA: i32 = -5248;
pub const MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA: i32 = -8064;
pub const MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE: i32 = -7936;
pub const MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT: i32 = -7808;
pub const MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH: i32 = -7680;
pub const MBEDTLS_PKCS12_DERIVE_KEY: u32 = 1;
pub const MBEDTLS_PKCS12_DERIVE_IV: u32 = 2;
pub const MBEDTLS_PKCS12_DERIVE_MAC_KEY: u32 = 3;
pub const MBEDTLS_PKCS12_PBE_DECRYPT: u32 = 0;
pub const MBEDTLS_PKCS12_PBE_ENCRYPT: u32 = 1;
pub const MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA: i32 = -12160;
pub const MBEDTLS_ERR_PKCS5_INVALID_FORMAT: i32 = -12032;
pub const MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE: i32 = -11904;
pub const MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH: i32 = -11776;
pub const MBEDTLS_PKCS5_DECRYPT: u32 = 0;
pub const MBEDTLS_PKCS5_ENCRYPT: u32 = 1;
pub const MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED: i32 = -112;
pub const MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED: i32 = -114;
pub const MBEDTLS_PLATFORM_STD_EXIT_SUCCESS: u32 = 0;
pub const MBEDTLS_PLATFORM_STD_EXIT_FAILURE: u32 = 1;
pub const MBEDTLS_EXIT_SUCCESS: u32 = 0;
pub const MBEDTLS_EXIT_FAILURE: u32 = 1;
pub const MBEDTLS_ERR_RIPEMD160_HW_ACCEL_FAILED: i32 = -49;
pub const MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED: i32 = -53;
pub const MBEDTLS_ERR_SHA1_BAD_INPUT_DATA: i32 = -115;
pub const MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED: i32 = -55;
pub const MBEDTLS_ERR_SHA256_BAD_INPUT_DATA: i32 = -116;
pub const MBEDTLS_VERSION_MAJOR: u32 = 2;
pub const MBEDTLS_VERSION_MINOR: u32 = 25;
pub const MBEDTLS_VERSION_PATCH: u32 = 0;
pub const MBEDTLS_VERSION_NUMBER: u32 = 35192832;
pub const MBEDTLS_VERSION_STRING: &'static [u8; 7usize] = b"2.25.0\0";
pub const MBEDTLS_VERSION_STRING_FULL: &'static [u8; 16usize] = b"mbed TLS 2.25.0\0";
pub const MBEDTLS_XTEA_ENCRYPT: u32 = 1;
pub const MBEDTLS_XTEA_DECRYPT: u32 = 0;
pub const MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH: i32 = -40;
pub const MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED: i32 = -41;
pub type mbedtls_iso_c_forbids_empty_translation_units = ::std::os::raw::c_int;
#[repr(C)]
pub struct mbedtls_aes_context {
    pub nr: ::std::os::raw::c_int,
    pub rk: *mut u32,
    pub buf: [u32; 68usize],
}
#[test]
fn bindgen_test_layout_mbedtls_aes_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_aes_context>(),
        288usize,
        concat!("Size of: ", stringify!(mbedtls_aes_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_aes_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_aes_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aes_context>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aes_context),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aes_context>())).rk as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aes_context),
            "::",
            stringify!(rk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aes_context>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aes_context),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
pub struct mbedtls_aes_xts_context {
    pub crypt: mbedtls_aes_context,
    pub tweak: mbedtls_aes_context,
}
#[test]
fn bindgen_test_layout_mbedtls_aes_xts_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_aes_xts_context>(),
        576usize,
        concat!("Size of: ", stringify!(mbedtls_aes_xts_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_aes_xts_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_aes_xts_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aes_xts_context>())).crypt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aes_xts_context),
            "::",
            stringify!(crypt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aes_xts_context>())).tweak as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aes_xts_context),
            "::",
            stringify!(tweak)
        )
    );
}
extern "C" {
    pub fn mbedtls_aes_init(ctx: *mut mbedtls_aes_context);
}
extern "C" {
    pub fn mbedtls_aes_free(ctx: *mut mbedtls_aes_context);
}
extern "C" {
    pub fn mbedtls_aes_xts_init(ctx: *mut mbedtls_aes_xts_context);
}
extern "C" {
    pub fn mbedtls_aes_xts_free(ctx: *mut mbedtls_aes_xts_context);
}
extern "C" {
    pub fn mbedtls_aes_setkey_enc(
        ctx: *mut mbedtls_aes_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_setkey_dec(
        ctx: *mut mbedtls_aes_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_xts_setkey_enc(
        ctx: *mut mbedtls_aes_xts_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_xts_setkey_dec(
        ctx: *mut mbedtls_aes_xts_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_ecb(
        ctx: *mut mbedtls_aes_context,
        mode: ::std::os::raw::c_int,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_cbc(
        ctx: *mut mbedtls_aes_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_xts(
        ctx: *mut mbedtls_aes_xts_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        data_unit: *const ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_cfb128(
        ctx: *mut mbedtls_aes_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv_off: *mut usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_cfb8(
        ctx: *mut mbedtls_aes_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_ofb(
        ctx: *mut mbedtls_aes_context,
        length: usize,
        iv_off: *mut usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_crypt_ctr(
        ctx: *mut mbedtls_aes_context,
        length: usize,
        nc_off: *mut usize,
        nonce_counter: *mut ::std::os::raw::c_uchar,
        stream_block: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_aes_encrypt(
        ctx: *mut mbedtls_aes_context,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_aes_decrypt(
        ctx: *mut mbedtls_aes_context,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aesni_has_support(what: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aesni_crypt_ecb(
        ctx: *mut mbedtls_aes_context,
        mode: ::std::os::raw::c_int,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aesni_gcm_mult(
        c: *mut ::std::os::raw::c_uchar,
        a: *const ::std::os::raw::c_uchar,
        b: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn mbedtls_aesni_inverse_key(
        invkey: *mut ::std::os::raw::c_uchar,
        fwdkey: *const ::std::os::raw::c_uchar,
        nr: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_aesni_setkey_enc(
        rk: *mut ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        bits: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mbedtls_arc4_context {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub m: [::std::os::raw::c_uchar; 256usize],
}
#[test]
fn bindgen_test_layout_mbedtls_arc4_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_arc4_context>(),
        264usize,
        concat!("Size of: ", stringify!(mbedtls_arc4_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_arc4_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_arc4_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_arc4_context>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_arc4_context),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_arc4_context>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_arc4_context),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_arc4_context>())).m as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_arc4_context),
            "::",
            stringify!(m)
        )
    );
}
extern "C" {
    pub fn mbedtls_arc4_init(ctx: *mut mbedtls_arc4_context);
}
extern "C" {
    pub fn mbedtls_arc4_free(ctx: *mut mbedtls_arc4_context);
}
extern "C" {
    pub fn mbedtls_arc4_setup(
        ctx: *mut mbedtls_arc4_context,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn mbedtls_arc4_crypt(
        ctx: *mut mbedtls_arc4_context,
        length: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_arc4_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_platform_zeroize(buf: *mut ::std::os::raw::c_void, len: usize);
}
#[repr(C)]
pub struct mbedtls_aria_context {
    pub nr: ::std::os::raw::c_uchar,
    pub rk: [[u32; 4usize]; 17usize],
}
#[test]
fn bindgen_test_layout_mbedtls_aria_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_aria_context>(),
        276usize,
        concat!("Size of: ", stringify!(mbedtls_aria_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_aria_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_aria_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aria_context>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aria_context),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_aria_context>())).rk as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_aria_context),
            "::",
            stringify!(rk)
        )
    );
}
extern "C" {
    pub fn mbedtls_aria_init(ctx: *mut mbedtls_aria_context);
}
extern "C" {
    pub fn mbedtls_aria_free(ctx: *mut mbedtls_aria_context);
}
extern "C" {
    pub fn mbedtls_aria_setkey_enc(
        ctx: *mut mbedtls_aria_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aria_setkey_dec(
        ctx: *mut mbedtls_aria_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aria_crypt_ecb(
        ctx: *mut mbedtls_aria_context,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aria_crypt_cbc(
        ctx: *mut mbedtls_aria_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aria_crypt_cfb128(
        ctx: *mut mbedtls_aria_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv_off: *mut usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aria_crypt_ctr(
        ctx: *mut mbedtls_aria_context,
        length: usize,
        nc_off: *mut usize,
        nonce_counter: *mut ::std::os::raw::c_uchar,
        stream_block: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aria_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type mbedtls_mpi_sint = i64;
pub type mbedtls_mpi_uint = u64;
pub type mbedtls_t_udbl = u128;
#[repr(C)]
pub struct mbedtls_mpi {
    pub s: ::std::os::raw::c_int,
    pub n: usize,
    pub p: *mut mbedtls_mpi_uint,
}
#[test]
fn bindgen_test_layout_mbedtls_mpi() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_mpi>(),
        24usize,
        concat!("Size of: ", stringify!(mbedtls_mpi))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_mpi>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_mpi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_mpi>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_mpi),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_mpi>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_mpi),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_mpi>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_mpi),
            "::",
            stringify!(p)
        )
    );
}
extern "C" {
    pub fn mbedtls_mpi_init(X: *mut mbedtls_mpi);
}
extern "C" {
    pub fn mbedtls_mpi_free(X: *mut mbedtls_mpi);
}
extern "C" {
    pub fn mbedtls_mpi_grow(X: *mut mbedtls_mpi, nblimbs: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_shrink(X: *mut mbedtls_mpi, nblimbs: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_copy(X: *mut mbedtls_mpi, Y: *const mbedtls_mpi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_swap(X: *mut mbedtls_mpi, Y: *mut mbedtls_mpi);
}
extern "C" {
    pub fn mbedtls_mpi_safe_cond_assign(
        X: *mut mbedtls_mpi,
        Y: *const mbedtls_mpi,
        assign: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_safe_cond_swap(
        X: *mut mbedtls_mpi,
        Y: *mut mbedtls_mpi,
        assign: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_lset(X: *mut mbedtls_mpi, z: mbedtls_mpi_sint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_get_bit(X: *const mbedtls_mpi, pos: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_set_bit(
        X: *mut mbedtls_mpi,
        pos: usize,
        val: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_lsb(X: *const mbedtls_mpi) -> usize;
}
extern "C" {
    pub fn mbedtls_mpi_bitlen(X: *const mbedtls_mpi) -> usize;
}
extern "C" {
    pub fn mbedtls_mpi_size(X: *const mbedtls_mpi) -> usize;
}
extern "C" {
    pub fn mbedtls_mpi_read_string(
        X: *mut mbedtls_mpi,
        radix: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_write_string(
        X: *const mbedtls_mpi,
        radix: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_read_binary(
        X: *mut mbedtls_mpi,
        buf: *const ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_read_binary_le(
        X: *mut mbedtls_mpi,
        buf: *const ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_write_binary(
        X: *const mbedtls_mpi,
        buf: *mut ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_write_binary_le(
        X: *const mbedtls_mpi,
        buf: *mut ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_shift_l(X: *mut mbedtls_mpi, count: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_shift_r(X: *mut mbedtls_mpi, count: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_cmp_abs(
        X: *const mbedtls_mpi,
        Y: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_cmp_mpi(
        X: *const mbedtls_mpi,
        Y: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_lt_mpi_ct(
        X: *const mbedtls_mpi,
        Y: *const mbedtls_mpi,
        ret: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_cmp_int(X: *const mbedtls_mpi, z: mbedtls_mpi_sint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_add_abs(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_sub_abs(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_add_mpi(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_sub_mpi(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_add_int(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_sub_int(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_mul_mpi(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_mul_int(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_div_mpi(
        Q: *mut mbedtls_mpi,
        R: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_div_int(
        Q: *mut mbedtls_mpi,
        R: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_mod_mpi(
        R: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_mod_int(
        r: *mut mbedtls_mpi_uint,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_exp_mod(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        E: *const mbedtls_mpi,
        N: *const mbedtls_mpi,
        _RR: *mut mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_fill_random(
        X: *mut mbedtls_mpi,
        size: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_gcd(
        G: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_inv_mod(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        N: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_is_prime_ext(
        X: *const mbedtls_mpi,
        rounds: ::std::os::raw::c_int,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const mbedtls_mpi_gen_prime_flag_t_MBEDTLS_MPI_GEN_PRIME_FLAG_DH: mbedtls_mpi_gen_prime_flag_t =
    1;
pub const mbedtls_mpi_gen_prime_flag_t_MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR:
    mbedtls_mpi_gen_prime_flag_t = 2;
pub type mbedtls_mpi_gen_prime_flag_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn mbedtls_mpi_gen_prime(
        X: *mut mbedtls_mpi,
        nbits: usize,
        flags: ::std::os::raw::c_int,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_mpi_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_asn1_buf {
    pub tag: ::std::os::raw::c_int,
    pub len: usize,
    pub p: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_mbedtls_asn1_buf() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_asn1_buf>(),
        24usize,
        concat!("Size of: ", stringify!(mbedtls_asn1_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_asn1_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_asn1_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_buf>())).tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_buf),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_buf>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_buf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_buf>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_buf),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
pub struct mbedtls_asn1_bitstring {
    pub len: usize,
    pub unused_bits: ::std::os::raw::c_uchar,
    pub p: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_mbedtls_asn1_bitstring() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_asn1_bitstring>(),
        24usize,
        concat!("Size of: ", stringify!(mbedtls_asn1_bitstring))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_asn1_bitstring>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_asn1_bitstring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_bitstring>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_bitstring),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_asn1_bitstring>())).unused_bits as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_bitstring),
            "::",
            stringify!(unused_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_bitstring>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_bitstring),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
pub struct mbedtls_asn1_sequence {
    pub buf: mbedtls_asn1_buf,
    pub next: *mut mbedtls_asn1_sequence,
}
#[test]
fn bindgen_test_layout_mbedtls_asn1_sequence() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_asn1_sequence>(),
        32usize,
        concat!("Size of: ", stringify!(mbedtls_asn1_sequence))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_asn1_sequence>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_asn1_sequence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_sequence>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_sequence),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_sequence>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_sequence),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
pub struct mbedtls_asn1_named_data {
    pub oid: mbedtls_asn1_buf,
    pub val: mbedtls_asn1_buf,
    pub next: *mut mbedtls_asn1_named_data,
    pub next_merged: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_mbedtls_asn1_named_data() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_asn1_named_data>(),
        64usize,
        concat!("Size of: ", stringify!(mbedtls_asn1_named_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_asn1_named_data>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_asn1_named_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_named_data>())).oid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_named_data),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_named_data>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_named_data),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_asn1_named_data>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_named_data),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_asn1_named_data>())).next_merged as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_asn1_named_data),
            "::",
            stringify!(next_merged)
        )
    );
}
extern "C" {
    pub fn mbedtls_asn1_get_len(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_tag(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        len: *mut usize,
        tag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_bool(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_int(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_enum(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_bitstring(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        bs: *mut mbedtls_asn1_bitstring,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_bitstring_null(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_sequence_of(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        cur: *mut mbedtls_asn1_sequence,
        tag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_sequence_free(seq: *mut mbedtls_asn1_sequence);
}
extern "C" {
    pub fn mbedtls_asn1_traverse_sequence_of(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        tag_must_mask: ::std::os::raw::c_uchar,
        tag_must_val: ::std::os::raw::c_uchar,
        tag_may_mask: ::std::os::raw::c_uchar,
        tag_may_val: ::std::os::raw::c_uchar,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                ctx: *mut ::std::os::raw::c_void,
                tag: ::std::os::raw::c_int,
                start: *mut ::std::os::raw::c_uchar,
                len: usize,
            ) -> ::std::os::raw::c_int,
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_mpi(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        X: *mut mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_alg(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        alg: *mut mbedtls_asn1_buf,
        params: *mut mbedtls_asn1_buf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_get_alg_null(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        alg: *mut mbedtls_asn1_buf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_find_named_data(
        list: *mut mbedtls_asn1_named_data,
        oid: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *mut mbedtls_asn1_named_data;
}
extern "C" {
    pub fn mbedtls_asn1_free_named_data(entry: *mut mbedtls_asn1_named_data);
}
extern "C" {
    pub fn mbedtls_asn1_free_named_data_list(head: *mut *mut mbedtls_asn1_named_data);
}
extern "C" {
    pub fn mbedtls_asn1_write_len(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_tag(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        tag: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_raw_buffer(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        buf: *const ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_mpi(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        X: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_null(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_oid(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        oid: *const ::std::os::raw::c_char,
        oid_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_algorithm_identifier(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        oid: *const ::std::os::raw::c_char,
        oid_len: usize,
        par_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_bool(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        boolean: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_int(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_enum(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_tagged_string(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        tag: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_printable_string(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_utf8_string(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_ia5_string(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        text: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_bitstring(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        buf: *const ::std::os::raw::c_uchar,
        bits: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_named_bitstring(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        buf: *const ::std::os::raw::c_uchar,
        bits: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_write_octet_string(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        buf: *const ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_asn1_store_named_data(
        list: *mut *mut mbedtls_asn1_named_data,
        oid: *const ::std::os::raw::c_char,
        oid_len: usize,
        val: *const ::std::os::raw::c_uchar,
        val_len: usize,
    ) -> *mut mbedtls_asn1_named_data;
}
extern "C" {
    pub fn mbedtls_base64_encode(
        dst: *mut ::std::os::raw::c_uchar,
        dlen: usize,
        olen: *mut usize,
        src: *const ::std::os::raw::c_uchar,
        slen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_base64_decode(
        dst: *mut ::std::os::raw::c_uchar,
        dlen: usize,
        olen: *mut usize,
        src: *const ::std::os::raw::c_uchar,
        slen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_base64_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_blowfish_context {
    pub P: [u32; 18usize],
    pub S: [[u32; 256usize]; 4usize],
}
#[test]
fn bindgen_test_layout_mbedtls_blowfish_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_blowfish_context>(),
        4168usize,
        concat!("Size of: ", stringify!(mbedtls_blowfish_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_blowfish_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_blowfish_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_blowfish_context>())).P as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_blowfish_context),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_blowfish_context>())).S as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_blowfish_context),
            "::",
            stringify!(S)
        )
    );
}
extern "C" {
    pub fn mbedtls_blowfish_init(ctx: *mut mbedtls_blowfish_context);
}
extern "C" {
    pub fn mbedtls_blowfish_free(ctx: *mut mbedtls_blowfish_context);
}
extern "C" {
    pub fn mbedtls_blowfish_setkey(
        ctx: *mut mbedtls_blowfish_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_blowfish_crypt_ecb(
        ctx: *mut mbedtls_blowfish_context,
        mode: ::std::os::raw::c_int,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_blowfish_crypt_cbc(
        ctx: *mut mbedtls_blowfish_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_blowfish_crypt_cfb64(
        ctx: *mut mbedtls_blowfish_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv_off: *mut usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_blowfish_crypt_ctr(
        ctx: *mut mbedtls_blowfish_context,
        length: usize,
        nc_off: *mut usize,
        nonce_counter: *mut ::std::os::raw::c_uchar,
        stream_block: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_camellia_context {
    pub nr: ::std::os::raw::c_int,
    pub rk: [u32; 68usize],
}
#[test]
fn bindgen_test_layout_mbedtls_camellia_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_camellia_context>(),
        276usize,
        concat!("Size of: ", stringify!(mbedtls_camellia_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_camellia_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_camellia_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_camellia_context>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_camellia_context),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_camellia_context>())).rk as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_camellia_context),
            "::",
            stringify!(rk)
        )
    );
}
extern "C" {
    pub fn mbedtls_camellia_init(ctx: *mut mbedtls_camellia_context);
}
extern "C" {
    pub fn mbedtls_camellia_free(ctx: *mut mbedtls_camellia_context);
}
extern "C" {
    pub fn mbedtls_camellia_setkey_enc(
        ctx: *mut mbedtls_camellia_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_camellia_setkey_dec(
        ctx: *mut mbedtls_camellia_context,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_camellia_crypt_ecb(
        ctx: *mut mbedtls_camellia_context,
        mode: ::std::os::raw::c_int,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_camellia_crypt_cbc(
        ctx: *mut mbedtls_camellia_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_camellia_crypt_cfb128(
        ctx: *mut mbedtls_camellia_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv_off: *mut usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_camellia_crypt_ctr(
        ctx: *mut mbedtls_camellia_context,
        length: usize,
        nc_off: *mut usize,
        nonce_counter: *mut ::std::os::raw::c_uchar,
        stream_block: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_camellia_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_NONE: mbedtls_cipher_id_t = 0;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_NULL: mbedtls_cipher_id_t = 1;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_AES: mbedtls_cipher_id_t = 2;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_DES: mbedtls_cipher_id_t = 3;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_3DES: mbedtls_cipher_id_t = 4;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_CAMELLIA: mbedtls_cipher_id_t = 5;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_BLOWFISH: mbedtls_cipher_id_t = 6;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_ARC4: mbedtls_cipher_id_t = 7;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_ARIA: mbedtls_cipher_id_t = 8;
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_CHACHA20: mbedtls_cipher_id_t = 9;
pub type mbedtls_cipher_id_t = ::std::os::raw::c_uint;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_NONE: mbedtls_cipher_type_t = 0;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_NULL: mbedtls_cipher_type_t = 1;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_ECB: mbedtls_cipher_type_t = 2;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_ECB: mbedtls_cipher_type_t = 3;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_ECB: mbedtls_cipher_type_t = 4;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CBC: mbedtls_cipher_type_t = 5;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CBC: mbedtls_cipher_type_t = 6;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CBC: mbedtls_cipher_type_t = 7;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CFB128: mbedtls_cipher_type_t = 8;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CFB128: mbedtls_cipher_type_t = 9;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CFB128: mbedtls_cipher_type_t = 10;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CTR: mbedtls_cipher_type_t = 11;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CTR: mbedtls_cipher_type_t = 12;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CTR: mbedtls_cipher_type_t = 13;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_GCM: mbedtls_cipher_type_t = 14;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_GCM: mbedtls_cipher_type_t = 15;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_GCM: mbedtls_cipher_type_t = 16;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_ECB: mbedtls_cipher_type_t = 17;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_ECB: mbedtls_cipher_type_t = 18;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_ECB: mbedtls_cipher_type_t = 19;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CBC: mbedtls_cipher_type_t = 20;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CBC: mbedtls_cipher_type_t = 21;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CBC: mbedtls_cipher_type_t = 22;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CFB128: mbedtls_cipher_type_t = 23;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CFB128: mbedtls_cipher_type_t = 24;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CFB128: mbedtls_cipher_type_t = 25;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CTR: mbedtls_cipher_type_t = 26;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CTR: mbedtls_cipher_type_t = 27;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CTR: mbedtls_cipher_type_t = 28;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_GCM: mbedtls_cipher_type_t = 29;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_GCM: mbedtls_cipher_type_t = 30;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_GCM: mbedtls_cipher_type_t = 31;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_ECB: mbedtls_cipher_type_t = 32;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_CBC: mbedtls_cipher_type_t = 33;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE_ECB: mbedtls_cipher_type_t = 34;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE_CBC: mbedtls_cipher_type_t = 35;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE3_ECB: mbedtls_cipher_type_t = 36;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE3_CBC: mbedtls_cipher_type_t = 37;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_ECB: mbedtls_cipher_type_t = 38;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_CBC: mbedtls_cipher_type_t = 39;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_CFB64: mbedtls_cipher_type_t = 40;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_CTR: mbedtls_cipher_type_t = 41;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARC4_128: mbedtls_cipher_type_t = 42;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CCM: mbedtls_cipher_type_t = 43;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CCM: mbedtls_cipher_type_t = 44;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CCM: mbedtls_cipher_type_t = 45;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CCM: mbedtls_cipher_type_t = 46;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CCM: mbedtls_cipher_type_t = 47;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CCM: mbedtls_cipher_type_t = 48;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_ECB: mbedtls_cipher_type_t = 49;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_ECB: mbedtls_cipher_type_t = 50;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_ECB: mbedtls_cipher_type_t = 51;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CBC: mbedtls_cipher_type_t = 52;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CBC: mbedtls_cipher_type_t = 53;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CBC: mbedtls_cipher_type_t = 54;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CFB128: mbedtls_cipher_type_t = 55;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CFB128: mbedtls_cipher_type_t = 56;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CFB128: mbedtls_cipher_type_t = 57;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CTR: mbedtls_cipher_type_t = 58;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CTR: mbedtls_cipher_type_t = 59;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CTR: mbedtls_cipher_type_t = 60;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_GCM: mbedtls_cipher_type_t = 61;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_GCM: mbedtls_cipher_type_t = 62;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_GCM: mbedtls_cipher_type_t = 63;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CCM: mbedtls_cipher_type_t = 64;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CCM: mbedtls_cipher_type_t = 65;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CCM: mbedtls_cipher_type_t = 66;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_OFB: mbedtls_cipher_type_t = 67;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_OFB: mbedtls_cipher_type_t = 68;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_OFB: mbedtls_cipher_type_t = 69;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_XTS: mbedtls_cipher_type_t = 70;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_XTS: mbedtls_cipher_type_t = 71;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CHACHA20: mbedtls_cipher_type_t = 72;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CHACHA20_POLY1305: mbedtls_cipher_type_t = 73;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_KW: mbedtls_cipher_type_t = 74;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_KW: mbedtls_cipher_type_t = 75;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_KW: mbedtls_cipher_type_t = 76;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_KWP: mbedtls_cipher_type_t = 77;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_KWP: mbedtls_cipher_type_t = 78;
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_KWP: mbedtls_cipher_type_t = 79;
pub type mbedtls_cipher_type_t = ::std::os::raw::c_uint;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_NONE: mbedtls_cipher_mode_t = 0;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_ECB: mbedtls_cipher_mode_t = 1;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CBC: mbedtls_cipher_mode_t = 2;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CFB: mbedtls_cipher_mode_t = 3;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_OFB: mbedtls_cipher_mode_t = 4;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CTR: mbedtls_cipher_mode_t = 5;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_GCM: mbedtls_cipher_mode_t = 6;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_STREAM: mbedtls_cipher_mode_t = 7;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CCM: mbedtls_cipher_mode_t = 8;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_XTS: mbedtls_cipher_mode_t = 9;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CHACHAPOLY: mbedtls_cipher_mode_t = 10;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_KW: mbedtls_cipher_mode_t = 11;
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_KWP: mbedtls_cipher_mode_t = 12;
pub type mbedtls_cipher_mode_t = ::std::os::raw::c_uint;
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_PKCS7: mbedtls_cipher_padding_t = 0;
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_ONE_AND_ZEROS: mbedtls_cipher_padding_t = 1;
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_ZEROS_AND_LEN: mbedtls_cipher_padding_t = 2;
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_ZEROS: mbedtls_cipher_padding_t = 3;
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_NONE: mbedtls_cipher_padding_t = 4;
pub type mbedtls_cipher_padding_t = ::std::os::raw::c_uint;
pub const mbedtls_operation_t_MBEDTLS_OPERATION_NONE: mbedtls_operation_t = -1;
pub const mbedtls_operation_t_MBEDTLS_DECRYPT: mbedtls_operation_t = 0;
pub const mbedtls_operation_t_MBEDTLS_ENCRYPT: mbedtls_operation_t = 1;
pub type mbedtls_operation_t = ::std::os::raw::c_int;
pub const MBEDTLS_KEY_LENGTH_NONE: ::std::os::raw::c_uint = 0;
pub const MBEDTLS_KEY_LENGTH_DES: ::std::os::raw::c_uint = 64;
pub const MBEDTLS_KEY_LENGTH_DES_EDE: ::std::os::raw::c_uint = 128;
pub const MBEDTLS_KEY_LENGTH_DES_EDE3: ::std::os::raw::c_uint = 192;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_cipher_base_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_cipher_info_t {
    pub type_: mbedtls_cipher_type_t,
    pub mode: mbedtls_cipher_mode_t,
    pub key_bitlen: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub iv_size: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_int,
    pub block_size: ::std::os::raw::c_uint,
    pub base: *const mbedtls_cipher_base_t,
}
#[test]
fn bindgen_test_layout_mbedtls_cipher_info_t() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_cipher_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(mbedtls_cipher_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_cipher_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_cipher_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).key_bitlen as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(key_bitlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).iv_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(iv_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).block_size as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_info_t>())).base as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_info_t),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
pub struct mbedtls_cipher_context_t {
    pub cipher_info: *const mbedtls_cipher_info_t,
    pub key_bitlen: ::std::os::raw::c_int,
    pub operation: mbedtls_operation_t,
    pub add_padding: ::std::option::Option<
        unsafe extern "C" fn(output: *mut ::std::os::raw::c_uchar, olen: usize, data_len: usize),
    >,
    pub get_padding: ::std::option::Option<
        unsafe extern "C" fn(
            input: *mut ::std::os::raw::c_uchar,
            ilen: usize,
            data_len: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub unprocessed_data: [::std::os::raw::c_uchar; 16usize],
    pub unprocessed_len: usize,
    pub iv: [::std::os::raw::c_uchar; 16usize],
    pub iv_size: usize,
    pub cipher_ctx: *mut ::std::os::raw::c_void,
    pub cmac_ctx: *mut mbedtls_cmac_context_t,
}
#[test]
fn bindgen_test_layout_mbedtls_cipher_context_t() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_cipher_context_t>(),
        96usize,
        concat!("Size of: ", stringify!(mbedtls_cipher_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_cipher_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_cipher_context_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).cipher_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(cipher_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).key_bitlen as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(key_bitlen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).operation as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).add_padding as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(add_padding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).get_padding as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(get_padding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).unprocessed_data as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(unprocessed_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).unprocessed_len as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(unprocessed_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).iv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).iv_size as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(iv_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).cipher_ctx as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(cipher_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cipher_context_t>())).cmac_ctx as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cipher_context_t),
            "::",
            stringify!(cmac_ctx)
        )
    );
}
extern "C" {
    pub fn mbedtls_cipher_list() -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_info_from_string(
        cipher_name: *const ::std::os::raw::c_char,
    ) -> *const mbedtls_cipher_info_t;
}
extern "C" {
    pub fn mbedtls_cipher_info_from_type(
        cipher_type: mbedtls_cipher_type_t,
    ) -> *const mbedtls_cipher_info_t;
}
extern "C" {
    pub fn mbedtls_cipher_info_from_values(
        cipher_id: mbedtls_cipher_id_t,
        key_bitlen: ::std::os::raw::c_int,
        mode: mbedtls_cipher_mode_t,
    ) -> *const mbedtls_cipher_info_t;
}
extern "C" {
    pub fn mbedtls_cipher_init(ctx: *mut mbedtls_cipher_context_t);
}
extern "C" {
    pub fn mbedtls_cipher_free(ctx: *mut mbedtls_cipher_context_t);
}
extern "C" {
    pub fn mbedtls_cipher_setup(
        ctx: *mut mbedtls_cipher_context_t,
        cipher_info: *const mbedtls_cipher_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_setkey(
        ctx: *mut mbedtls_cipher_context_t,
        key: *const ::std::os::raw::c_uchar,
        key_bitlen: ::std::os::raw::c_int,
        operation: mbedtls_operation_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_set_padding_mode(
        ctx: *mut mbedtls_cipher_context_t,
        mode: mbedtls_cipher_padding_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_set_iv(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_reset(ctx: *mut mbedtls_cipher_context_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_update_ad(
        ctx: *mut mbedtls_cipher_context_t,
        ad: *const ::std::os::raw::c_uchar,
        ad_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_update(
        ctx: *mut mbedtls_cipher_context_t,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_finish(
        ctx: *mut mbedtls_cipher_context_t,
        output: *mut ::std::os::raw::c_uchar,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_write_tag(
        ctx: *mut mbedtls_cipher_context_t,
        tag: *mut ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_check_tag(
        ctx: *mut mbedtls_cipher_context_t,
        tag: *const ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_crypt(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_auth_encrypt_ext(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        ad: *const ::std::os::raw::c_uchar,
        ad_len: usize,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        output_len: usize,
        olen: *mut usize,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_auth_decrypt_ext(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        ad: *const ::std::os::raw::c_uchar,
        ad_len: usize,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        output_len: usize,
        olen: *mut usize,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_ccm_context {
    pub cipher_ctx: mbedtls_cipher_context_t,
}
#[test]
fn bindgen_test_layout_mbedtls_ccm_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ccm_context>(),
        96usize,
        concat!("Size of: ", stringify!(mbedtls_ccm_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ccm_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ccm_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ccm_context>())).cipher_ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ccm_context),
            "::",
            stringify!(cipher_ctx)
        )
    );
}
extern "C" {
    pub fn mbedtls_ccm_init(ctx: *mut mbedtls_ccm_context);
}
extern "C" {
    pub fn mbedtls_ccm_setkey(
        ctx: *mut mbedtls_ccm_context,
        cipher: mbedtls_cipher_id_t,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ccm_free(ctx: *mut mbedtls_ccm_context);
}
extern "C" {
    pub fn mbedtls_ccm_encrypt_and_tag(
        ctx: *mut mbedtls_ccm_context,
        length: usize,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ccm_star_encrypt_and_tag(
        ctx: *mut mbedtls_ccm_context,
        length: usize,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ccm_auth_decrypt(
        ctx: *mut mbedtls_ccm_context,
        length: usize,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ccm_star_auth_decrypt(
        ctx: *mut mbedtls_ccm_context,
        length: usize,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ccm_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_chacha20_context {
    pub state: [u32; 16usize],
    pub keystream8: [u8; 64usize],
    pub keystream_bytes_used: usize,
}
#[test]
fn bindgen_test_layout_mbedtls_chacha20_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_chacha20_context>(),
        136usize,
        concat!("Size of: ", stringify!(mbedtls_chacha20_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_chacha20_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_chacha20_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_chacha20_context>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chacha20_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chacha20_context>())).keystream8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chacha20_context),
            "::",
            stringify!(keystream8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chacha20_context>())).keystream_bytes_used as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chacha20_context),
            "::",
            stringify!(keystream_bytes_used)
        )
    );
}
extern "C" {
    pub fn mbedtls_chacha20_init(ctx: *mut mbedtls_chacha20_context);
}
extern "C" {
    pub fn mbedtls_chacha20_free(ctx: *mut mbedtls_chacha20_context);
}
extern "C" {
    pub fn mbedtls_chacha20_setkey(
        ctx: *mut mbedtls_chacha20_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chacha20_starts(
        ctx: *mut mbedtls_chacha20_context,
        nonce: *const ::std::os::raw::c_uchar,
        counter: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chacha20_update(
        ctx: *mut mbedtls_chacha20_context,
        size: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chacha20_crypt(
        key: *const ::std::os::raw::c_uchar,
        nonce: *const ::std::os::raw::c_uchar,
        counter: u32,
        size: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chacha20_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_poly1305_context {
    pub r: [u32; 4usize],
    pub s: [u32; 4usize],
    pub acc: [u32; 5usize],
    pub queue: [u8; 16usize],
    pub queue_len: usize,
}
#[test]
fn bindgen_test_layout_mbedtls_poly1305_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_poly1305_context>(),
        80usize,
        concat!("Size of: ", stringify!(mbedtls_poly1305_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_poly1305_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_poly1305_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_poly1305_context>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_poly1305_context),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_poly1305_context>())).s as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_poly1305_context),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_poly1305_context>())).acc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_poly1305_context),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_poly1305_context>())).queue as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_poly1305_context),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_poly1305_context>())).queue_len as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_poly1305_context),
            "::",
            stringify!(queue_len)
        )
    );
}
extern "C" {
    pub fn mbedtls_poly1305_init(ctx: *mut mbedtls_poly1305_context);
}
extern "C" {
    pub fn mbedtls_poly1305_free(ctx: *mut mbedtls_poly1305_context);
}
extern "C" {
    pub fn mbedtls_poly1305_starts(
        ctx: *mut mbedtls_poly1305_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_poly1305_update(
        ctx: *mut mbedtls_poly1305_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_poly1305_finish(
        ctx: *mut mbedtls_poly1305_context,
        mac: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_poly1305_mac(
        key: *const ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        mac: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_poly1305_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const mbedtls_chachapoly_mode_t_MBEDTLS_CHACHAPOLY_ENCRYPT: mbedtls_chachapoly_mode_t = 0;
pub const mbedtls_chachapoly_mode_t_MBEDTLS_CHACHAPOLY_DECRYPT: mbedtls_chachapoly_mode_t = 1;
pub type mbedtls_chachapoly_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct mbedtls_chachapoly_context {
    pub chacha20_ctx: mbedtls_chacha20_context,
    pub poly1305_ctx: mbedtls_poly1305_context,
    pub aad_len: u64,
    pub ciphertext_len: u64,
    pub state: ::std::os::raw::c_int,
    pub mode: mbedtls_chachapoly_mode_t,
}
#[test]
fn bindgen_test_layout_mbedtls_chachapoly_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_chachapoly_context>(),
        240usize,
        concat!("Size of: ", stringify!(mbedtls_chachapoly_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_chachapoly_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_chachapoly_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chachapoly_context>())).chacha20_ctx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chachapoly_context),
            "::",
            stringify!(chacha20_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chachapoly_context>())).poly1305_ctx as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chachapoly_context),
            "::",
            stringify!(poly1305_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chachapoly_context>())).aad_len as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chachapoly_context),
            "::",
            stringify!(aad_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chachapoly_context>())).ciphertext_len as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chachapoly_context),
            "::",
            stringify!(ciphertext_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_chachapoly_context>())).state as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chachapoly_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_chachapoly_context>())).mode as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_chachapoly_context),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn mbedtls_chachapoly_init(ctx: *mut mbedtls_chachapoly_context);
}
extern "C" {
    pub fn mbedtls_chachapoly_free(ctx: *mut mbedtls_chachapoly_context);
}
extern "C" {
    pub fn mbedtls_chachapoly_setkey(
        ctx: *mut mbedtls_chachapoly_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_starts(
        ctx: *mut mbedtls_chachapoly_context,
        nonce: *const ::std::os::raw::c_uchar,
        mode: mbedtls_chachapoly_mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_update_aad(
        ctx: *mut mbedtls_chachapoly_context,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_update(
        ctx: *mut mbedtls_chachapoly_context,
        len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_finish(
        ctx: *mut mbedtls_chachapoly_context,
        mac: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_encrypt_and_tag(
        ctx: *mut mbedtls_chachapoly_context,
        length: usize,
        nonce: *const ::std::os::raw::c_uchar,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_auth_decrypt(
        ctx: *mut mbedtls_chachapoly_context,
        length: usize,
        nonce: *const ::std::os::raw::c_uchar,
        aad: *const ::std::os::raw::c_uchar,
        aad_len: usize,
        tag: *const ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_chachapoly_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_cmac_context_t {
    pub state: [::std::os::raw::c_uchar; 16usize],
    pub unprocessed_block: [::std::os::raw::c_uchar; 16usize],
    pub unprocessed_len: usize,
}
#[test]
fn bindgen_test_layout_mbedtls_cmac_context_t() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_cmac_context_t>(),
        40usize,
        concat!("Size of: ", stringify!(mbedtls_cmac_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_cmac_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_cmac_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_cmac_context_t>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cmac_context_t),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cmac_context_t>())).unprocessed_block as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cmac_context_t),
            "::",
            stringify!(unprocessed_block)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_cmac_context_t>())).unprocessed_len as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_cmac_context_t),
            "::",
            stringify!(unprocessed_len)
        )
    );
}
extern "C" {
    pub fn mbedtls_cipher_cmac_starts(
        ctx: *mut mbedtls_cipher_context_t,
        key: *const ::std::os::raw::c_uchar,
        keybits: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_cmac_update(
        ctx: *mut mbedtls_cipher_context_t,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_cmac_finish(
        ctx: *mut mbedtls_cipher_context_t,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_cmac_reset(ctx: *mut mbedtls_cipher_context_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cipher_cmac(
        cipher_info: *const mbedtls_cipher_info_t,
        key: *const ::std::os::raw::c_uchar,
        keylen: usize,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_aes_cmac_prf_128(
        key: *const ::std::os::raw::c_uchar,
        key_len: usize,
        input: *const ::std::os::raw::c_uchar,
        in_len: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_cmac_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_ctr_drbg_context {
    pub counter: [::std::os::raw::c_uchar; 16usize],
    pub reseed_counter: ::std::os::raw::c_int,
    pub prediction_resistance: ::std::os::raw::c_int,
    pub entropy_len: usize,
    pub reseed_interval: ::std::os::raw::c_int,
    pub aes_ctx: mbedtls_aes_context,
    pub f_entropy: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_uchar,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub p_entropy: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mbedtls_ctr_drbg_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ctr_drbg_context>(),
        344usize,
        concat!("Size of: ", stringify!(mbedtls_ctr_drbg_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ctr_drbg_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ctr_drbg_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).counter as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).reseed_counter as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(reseed_counter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).prediction_resistance as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(prediction_resistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).entropy_len as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(entropy_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).reseed_interval as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(reseed_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).aes_ctx as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(aes_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).f_entropy as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(f_entropy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ctr_drbg_context>())).p_entropy as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ctr_drbg_context),
            "::",
            stringify!(p_entropy)
        )
    );
}
extern "C" {
    pub fn mbedtls_ctr_drbg_init(ctx: *mut mbedtls_ctr_drbg_context);
}
extern "C" {
    pub fn mbedtls_ctr_drbg_seed(
        ctx: *mut mbedtls_ctr_drbg_context,
        f_entropy: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_entropy: *mut ::std::os::raw::c_void,
        custom: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ctr_drbg_free(ctx: *mut mbedtls_ctr_drbg_context);
}
extern "C" {
    pub fn mbedtls_ctr_drbg_set_prediction_resistance(
        ctx: *mut mbedtls_ctr_drbg_context,
        resistance: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_ctr_drbg_set_entropy_len(ctx: *mut mbedtls_ctr_drbg_context, len: usize);
}
extern "C" {
    pub fn mbedtls_ctr_drbg_set_nonce_len(
        ctx: *mut mbedtls_ctr_drbg_context,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ctr_drbg_set_reseed_interval(
        ctx: *mut mbedtls_ctr_drbg_context,
        interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_ctr_drbg_reseed(
        ctx: *mut mbedtls_ctr_drbg_context,
        additional: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ctr_drbg_update_ret(
        ctx: *mut mbedtls_ctr_drbg_context,
        additional: *const ::std::os::raw::c_uchar,
        add_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ctr_drbg_random_with_add(
        p_rng: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        output_len: usize,
        additional: *const ::std::os::raw::c_uchar,
        add_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ctr_drbg_random(
        p_rng: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        output_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ctr_drbg_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_des_context {
    pub sk: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_mbedtls_des_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_des_context>(),
        128usize,
        concat!("Size of: ", stringify!(mbedtls_des_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_des_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_des_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_des_context>())).sk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_des_context),
            "::",
            stringify!(sk)
        )
    );
}
#[repr(C)]
pub struct mbedtls_des3_context {
    pub sk: [u32; 96usize],
}
#[test]
fn bindgen_test_layout_mbedtls_des3_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_des3_context>(),
        384usize,
        concat!("Size of: ", stringify!(mbedtls_des3_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_des3_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_des3_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_des3_context>())).sk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_des3_context),
            "::",
            stringify!(sk)
        )
    );
}
extern "C" {
    pub fn mbedtls_des_init(ctx: *mut mbedtls_des_context);
}
extern "C" {
    pub fn mbedtls_des_free(ctx: *mut mbedtls_des_context);
}
extern "C" {
    pub fn mbedtls_des3_init(ctx: *mut mbedtls_des3_context);
}
extern "C" {
    pub fn mbedtls_des3_free(ctx: *mut mbedtls_des3_context);
}
extern "C" {
    pub fn mbedtls_des_key_set_parity(key: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn mbedtls_des_key_check_key_parity(
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des_key_check_weak(key: *const ::std::os::raw::c_uchar)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des_setkey_enc(
        ctx: *mut mbedtls_des_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des_setkey_dec(
        ctx: *mut mbedtls_des_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des3_set2key_enc(
        ctx: *mut mbedtls_des3_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des3_set2key_dec(
        ctx: *mut mbedtls_des3_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des3_set3key_enc(
        ctx: *mut mbedtls_des3_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des3_set3key_dec(
        ctx: *mut mbedtls_des3_context,
        key: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des_crypt_ecb(
        ctx: *mut mbedtls_des_context,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des_crypt_cbc(
        ctx: *mut mbedtls_des_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des3_crypt_ecb(
        ctx: *mut mbedtls_des3_context,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des3_crypt_cbc(
        ctx: *mut mbedtls_des3_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_des_setkey(SK: *mut u32, key: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn mbedtls_des_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_dhm_context {
    pub len: usize,
    pub P: mbedtls_mpi,
    pub G: mbedtls_mpi,
    pub X: mbedtls_mpi,
    pub GX: mbedtls_mpi,
    pub GY: mbedtls_mpi,
    pub K: mbedtls_mpi,
    pub RP: mbedtls_mpi,
    pub Vi: mbedtls_mpi,
    pub Vf: mbedtls_mpi,
    pub pX: mbedtls_mpi,
}
#[test]
fn bindgen_test_layout_mbedtls_dhm_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_dhm_context>(),
        248usize,
        concat!("Size of: ", stringify!(mbedtls_dhm_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_dhm_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_dhm_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).P as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).G as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(G)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).X as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).GX as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(GX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).GY as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(GY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).K as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).RP as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(RP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).Vi as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(Vi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).Vf as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(Vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_dhm_context>())).pX as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_dhm_context),
            "::",
            stringify!(pX)
        )
    );
}
extern "C" {
    pub fn mbedtls_dhm_init(ctx: *mut mbedtls_dhm_context);
}
extern "C" {
    pub fn mbedtls_dhm_read_params(
        ctx: *mut mbedtls_dhm_context,
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_make_params(
        ctx: *mut mbedtls_dhm_context,
        x_size: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_uchar,
        olen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_set_group(
        ctx: *mut mbedtls_dhm_context,
        P: *const mbedtls_mpi,
        G: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_read_public(
        ctx: *mut mbedtls_dhm_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_make_public(
        ctx: *mut mbedtls_dhm_context,
        x_size: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_uchar,
        olen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_calc_secret(
        ctx: *mut mbedtls_dhm_context,
        output: *mut ::std::os::raw::c_uchar,
        output_size: usize,
        olen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_free(ctx: *mut mbedtls_dhm_context);
}
extern "C" {
    pub fn mbedtls_dhm_parse_dhm(
        dhm: *mut mbedtls_dhm_context,
        dhmin: *const ::std::os::raw::c_uchar,
        dhminlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_dhm_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_NONE: mbedtls_ecp_group_id = 0;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP192R1: mbedtls_ecp_group_id = 1;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP224R1: mbedtls_ecp_group_id = 2;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP256R1: mbedtls_ecp_group_id = 3;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP384R1: mbedtls_ecp_group_id = 4;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP521R1: mbedtls_ecp_group_id = 5;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_BP256R1: mbedtls_ecp_group_id = 6;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_BP384R1: mbedtls_ecp_group_id = 7;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_BP512R1: mbedtls_ecp_group_id = 8;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_CURVE25519: mbedtls_ecp_group_id = 9;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP192K1: mbedtls_ecp_group_id = 10;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP224K1: mbedtls_ecp_group_id = 11;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP256K1: mbedtls_ecp_group_id = 12;
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_CURVE448: mbedtls_ecp_group_id = 13;
pub type mbedtls_ecp_group_id = ::std::os::raw::c_uint;
pub const mbedtls_ecp_curve_type_MBEDTLS_ECP_TYPE_NONE: mbedtls_ecp_curve_type = 0;
pub const mbedtls_ecp_curve_type_MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS: mbedtls_ecp_curve_type = 1;
pub const mbedtls_ecp_curve_type_MBEDTLS_ECP_TYPE_MONTGOMERY: mbedtls_ecp_curve_type = 2;
pub type mbedtls_ecp_curve_type = ::std::os::raw::c_uint;
#[repr(C)]
pub struct mbedtls_ecp_curve_info {
    pub grp_id: mbedtls_ecp_group_id,
    pub tls_id: u16,
    pub bit_size: u16,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mbedtls_ecp_curve_info() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecp_curve_info>(),
        16usize,
        concat!("Size of: ", stringify!(mbedtls_ecp_curve_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecp_curve_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecp_curve_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_curve_info>())).grp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_curve_info),
            "::",
            stringify!(grp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_curve_info>())).tls_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_curve_info),
            "::",
            stringify!(tls_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_curve_info>())).bit_size as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_curve_info),
            "::",
            stringify!(bit_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_curve_info>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_curve_info),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
pub struct mbedtls_ecp_point {
    pub X: mbedtls_mpi,
    pub Y: mbedtls_mpi,
    pub Z: mbedtls_mpi,
}
#[test]
fn bindgen_test_layout_mbedtls_ecp_point() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecp_point>(),
        72usize,
        concat!("Size of: ", stringify!(mbedtls_ecp_point))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecp_point>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecp_point))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_point>())).X as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_point),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_point>())).Y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_point),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_point>())).Z as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_point),
            "::",
            stringify!(Z)
        )
    );
}
#[repr(C)]
pub struct mbedtls_ecp_group {
    pub id: mbedtls_ecp_group_id,
    pub P: mbedtls_mpi,
    pub A: mbedtls_mpi,
    pub B: mbedtls_mpi,
    pub G: mbedtls_ecp_point,
    pub N: mbedtls_mpi,
    pub pbits: usize,
    pub nbits: usize,
    pub h: ::std::os::raw::c_uint,
    pub modp: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mbedtls_mpi) -> ::std::os::raw::c_int,
    >,
    pub t_pre: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mbedtls_ecp_point,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub t_post: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mbedtls_ecp_point,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub t_data: *mut ::std::os::raw::c_void,
    pub T: *mut mbedtls_ecp_point,
    pub T_size: usize,
}
#[test]
fn bindgen_test_layout_mbedtls_ecp_group() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecp_group>(),
        248usize,
        concat!("Size of: ", stringify!(mbedtls_ecp_group))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecp_group>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecp_group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).P as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).A as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(A)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).B as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).G as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(G)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).N as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).pbits as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(pbits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).nbits as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(nbits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).h as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).modp as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(modp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).t_pre as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(t_pre)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).t_post as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(t_post)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).t_data as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(t_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).T as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(T)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_group>())).T_size as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_group),
            "::",
            stringify!(T_size)
        )
    );
}
pub type mbedtls_ecp_restart_ctx = ::std::os::raw::c_void;
#[repr(C)]
pub struct mbedtls_ecp_keypair {
    pub grp: mbedtls_ecp_group,
    pub d: mbedtls_mpi,
    pub Q: mbedtls_ecp_point,
}
#[test]
fn bindgen_test_layout_mbedtls_ecp_keypair() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecp_keypair>(),
        344usize,
        concat!("Size of: ", stringify!(mbedtls_ecp_keypair))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecp_keypair>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecp_keypair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_keypair>())).grp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_keypair),
            "::",
            stringify!(grp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_keypair>())).d as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_keypair),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecp_keypair>())).Q as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecp_keypair),
            "::",
            stringify!(Q)
        )
    );
}
extern "C" {
    pub fn mbedtls_ecp_get_type(grp: *const mbedtls_ecp_group) -> mbedtls_ecp_curve_type;
}
extern "C" {
    pub fn mbedtls_ecp_curve_list() -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    pub fn mbedtls_ecp_grp_id_list() -> *const mbedtls_ecp_group_id;
}
extern "C" {
    pub fn mbedtls_ecp_curve_info_from_grp_id(
        grp_id: mbedtls_ecp_group_id,
    ) -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    pub fn mbedtls_ecp_curve_info_from_tls_id(tls_id: u16) -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    pub fn mbedtls_ecp_curve_info_from_name(
        name: *const ::std::os::raw::c_char,
    ) -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    pub fn mbedtls_ecp_point_init(pt: *mut mbedtls_ecp_point);
}
extern "C" {
    pub fn mbedtls_ecp_group_init(grp: *mut mbedtls_ecp_group);
}
extern "C" {
    pub fn mbedtls_ecp_keypair_init(key: *mut mbedtls_ecp_keypair);
}
extern "C" {
    pub fn mbedtls_ecp_point_free(pt: *mut mbedtls_ecp_point);
}
extern "C" {
    pub fn mbedtls_ecp_group_free(grp: *mut mbedtls_ecp_group);
}
extern "C" {
    pub fn mbedtls_ecp_keypair_free(key: *mut mbedtls_ecp_keypair);
}
extern "C" {
    pub fn mbedtls_ecp_copy(
        P: *mut mbedtls_ecp_point,
        Q: *const mbedtls_ecp_point,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_group_copy(
        dst: *mut mbedtls_ecp_group,
        src: *const mbedtls_ecp_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_set_zero(pt: *mut mbedtls_ecp_point) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_is_zero(pt: *mut mbedtls_ecp_point) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_point_cmp(
        P: *const mbedtls_ecp_point,
        Q: *const mbedtls_ecp_point,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_point_read_string(
        P: *mut mbedtls_ecp_point,
        radix: ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_char,
        y: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_point_write_binary(
        grp: *const mbedtls_ecp_group,
        P: *const mbedtls_ecp_point,
        format: ::std::os::raw::c_int,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_point_read_binary(
        grp: *const mbedtls_ecp_group,
        P: *mut mbedtls_ecp_point,
        buf: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_tls_read_point(
        grp: *const mbedtls_ecp_group,
        pt: *mut mbedtls_ecp_point,
        buf: *mut *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_tls_write_point(
        grp: *const mbedtls_ecp_group,
        pt: *const mbedtls_ecp_point,
        format: ::std::os::raw::c_int,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_group_load(
        grp: *mut mbedtls_ecp_group,
        id: mbedtls_ecp_group_id,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_tls_read_group(
        grp: *mut mbedtls_ecp_group,
        buf: *mut *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_tls_read_group_id(
        grp: *mut mbedtls_ecp_group_id,
        buf: *mut *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_tls_write_group(
        grp: *const mbedtls_ecp_group,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_mul(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_mul_restartable(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        rs_ctx: *mut mbedtls_ecp_restart_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_muladd(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        n: *const mbedtls_mpi,
        Q: *const mbedtls_ecp_point,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_muladd_restartable(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        n: *const mbedtls_mpi,
        Q: *const mbedtls_ecp_point,
        rs_ctx: *mut mbedtls_ecp_restart_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_check_pubkey(
        grp: *const mbedtls_ecp_group,
        pt: *const mbedtls_ecp_point,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_check_privkey(
        grp: *const mbedtls_ecp_group,
        d: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_gen_privkey(
        grp: *const mbedtls_ecp_group,
        d: *mut mbedtls_mpi,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_gen_keypair_base(
        grp: *mut mbedtls_ecp_group,
        G: *const mbedtls_ecp_point,
        d: *mut mbedtls_mpi,
        Q: *mut mbedtls_ecp_point,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_gen_keypair(
        grp: *mut mbedtls_ecp_group,
        d: *mut mbedtls_mpi,
        Q: *mut mbedtls_ecp_point,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_gen_key(
        grp_id: mbedtls_ecp_group_id,
        key: *mut mbedtls_ecp_keypair,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_read_key(
        grp_id: mbedtls_ecp_group_id,
        key: *mut mbedtls_ecp_keypair,
        buf: *const ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_write_key(
        key: *mut mbedtls_ecp_keypair,
        buf: *mut ::std::os::raw::c_uchar,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_check_pub_priv(
        pub_: *const mbedtls_ecp_keypair,
        prv: *const mbedtls_ecp_keypair,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecp_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const mbedtls_x25519_ecdh_side_MBEDTLS_X25519_ECDH_OURS: mbedtls_x25519_ecdh_side = 0;
pub const mbedtls_x25519_ecdh_side_MBEDTLS_X25519_ECDH_THEIRS: mbedtls_x25519_ecdh_side = 1;
pub type mbedtls_x25519_ecdh_side = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x25519_context {
    pub our_secret: [::std::os::raw::c_uchar; 32usize],
    pub peer_point: [::std::os::raw::c_uchar; 32usize],
}
#[test]
fn bindgen_test_layout_mbedtls_x25519_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_x25519_context>(),
        64usize,
        concat!("Size of: ", stringify!(mbedtls_x25519_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_x25519_context>(),
        1usize,
        concat!("Alignment of ", stringify!(mbedtls_x25519_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_x25519_context>())).our_secret as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_x25519_context),
            "::",
            stringify!(our_secret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_x25519_context>())).peer_point as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_x25519_context),
            "::",
            stringify!(peer_point)
        )
    );
}
extern "C" {
    pub fn mbedtls_x25519_init(ctx: *mut mbedtls_x25519_context);
}
extern "C" {
    pub fn mbedtls_x25519_free(ctx: *mut mbedtls_x25519_context);
}
extern "C" {
    pub fn mbedtls_x25519_make_params(
        ctx: *mut mbedtls_x25519_context,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_x25519_read_params(
        ctx: *mut mbedtls_x25519_context,
        buf: *mut *const ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_x25519_get_params(
        ctx: *mut mbedtls_x25519_context,
        key: *const mbedtls_ecp_keypair,
        side: mbedtls_x25519_ecdh_side,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_x25519_calc_secret(
        ctx: *mut mbedtls_x25519_context,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_x25519_make_public(
        ctx: *mut mbedtls_x25519_context,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_x25519_read_public(
        ctx: *mut mbedtls_x25519_context,
        buf: *const ::std::os::raw::c_uchar,
        blen: usize,
    ) -> ::std::os::raw::c_int;
}
pub const mbedtls_everest_ecdh_side_MBEDTLS_EVEREST_ECDH_OURS: mbedtls_everest_ecdh_side = 0;
pub const mbedtls_everest_ecdh_side_MBEDTLS_EVEREST_ECDH_THEIRS: mbedtls_everest_ecdh_side = 1;
pub type mbedtls_everest_ecdh_side = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ecdh_context_everest {
    pub ctx: mbedtls_x25519_context,
}
#[test]
fn bindgen_test_layout_mbedtls_ecdh_context_everest() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecdh_context_everest>(),
        64usize,
        concat!("Size of: ", stringify!(mbedtls_ecdh_context_everest))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecdh_context_everest>(),
        1usize,
        concat!("Alignment of ", stringify!(mbedtls_ecdh_context_everest))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ecdh_context_everest>())).ctx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context_everest),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn mbedtls_everest_setup(
        ctx: *mut mbedtls_ecdh_context_everest,
        grp_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_everest_free(ctx: *mut mbedtls_ecdh_context_everest);
}
extern "C" {
    pub fn mbedtls_everest_make_params(
        ctx: *mut mbedtls_ecdh_context_everest,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_everest_read_params(
        ctx: *mut mbedtls_ecdh_context_everest,
        buf: *mut *const ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_everest_get_params(
        ctx: *mut mbedtls_ecdh_context_everest,
        key: *const mbedtls_ecp_keypair,
        side: mbedtls_everest_ecdh_side,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_everest_make_public(
        ctx: *mut mbedtls_ecdh_context_everest,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_everest_read_public(
        ctx: *mut mbedtls_ecdh_context_everest,
        buf: *const ::std::os::raw::c_uchar,
        blen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_everest_calc_secret(
        ctx: *mut mbedtls_ecdh_context_everest,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const mbedtls_ecdh_side_MBEDTLS_ECDH_OURS: mbedtls_ecdh_side = 0;
pub const mbedtls_ecdh_side_MBEDTLS_ECDH_THEIRS: mbedtls_ecdh_side = 1;
pub type mbedtls_ecdh_side = ::std::os::raw::c_uint;
pub const mbedtls_ecdh_variant_MBEDTLS_ECDH_VARIANT_NONE: mbedtls_ecdh_variant = 0;
pub const mbedtls_ecdh_variant_MBEDTLS_ECDH_VARIANT_MBEDTLS_2_0: mbedtls_ecdh_variant = 1;
pub const mbedtls_ecdh_variant_MBEDTLS_ECDH_VARIANT_EVEREST: mbedtls_ecdh_variant = 2;
pub type mbedtls_ecdh_variant = ::std::os::raw::c_uint;
#[repr(C)]
pub struct mbedtls_ecdh_context_mbed {
    pub grp: mbedtls_ecp_group,
    pub d: mbedtls_mpi,
    pub Q: mbedtls_ecp_point,
    pub Qp: mbedtls_ecp_point,
    pub z: mbedtls_mpi,
}
#[test]
fn bindgen_test_layout_mbedtls_ecdh_context_mbed() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecdh_context_mbed>(),
        440usize,
        concat!("Size of: ", stringify!(mbedtls_ecdh_context_mbed))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecdh_context_mbed>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecdh_context_mbed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context_mbed>())).grp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context_mbed),
            "::",
            stringify!(grp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context_mbed>())).d as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context_mbed),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context_mbed>())).Q as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context_mbed),
            "::",
            stringify!(Q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context_mbed>())).Qp as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context_mbed),
            "::",
            stringify!(Qp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context_mbed>())).z as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context_mbed),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
pub struct mbedtls_ecdh_context {
    pub point_format: u8,
    pub grp_id: mbedtls_ecp_group_id,
    pub var: mbedtls_ecdh_variant,
    pub ctx: mbedtls_ecdh_context__bindgen_ty_1,
}
#[repr(C)]
pub struct mbedtls_ecdh_context__bindgen_ty_1 {
    pub mbed_ecdh: __BindgenUnionField<mbedtls_ecdh_context_mbed>,
    pub everest_ecdh: __BindgenUnionField<mbedtls_ecdh_context_everest>,
    pub bindgen_union_field: [u64; 55usize],
}
#[test]
fn bindgen_test_layout_mbedtls_ecdh_context__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecdh_context__bindgen_ty_1>(),
        440usize,
        concat!("Size of: ", stringify!(mbedtls_ecdh_context__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecdh_context__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mbedtls_ecdh_context__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ecdh_context__bindgen_ty_1>())).mbed_ecdh as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context__bindgen_ty_1),
            "::",
            stringify!(mbed_ecdh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ecdh_context__bindgen_ty_1>())).everest_ecdh as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context__bindgen_ty_1),
            "::",
            stringify!(everest_ecdh)
        )
    );
}
#[test]
fn bindgen_test_layout_mbedtls_ecdh_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecdh_context>(),
        456usize,
        concat!("Size of: ", stringify!(mbedtls_ecdh_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecdh_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecdh_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ecdh_context>())).point_format as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context),
            "::",
            stringify!(point_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context>())).grp_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context),
            "::",
            stringify!(grp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context>())).var as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecdh_context>())).ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecdh_context),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn mbedtls_ecdh_can_do(gid: mbedtls_ecp_group_id) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_gen_public(
        grp: *mut mbedtls_ecp_group,
        d: *mut mbedtls_mpi,
        Q: *mut mbedtls_ecp_point,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_compute_shared(
        grp: *mut mbedtls_ecp_group,
        z: *mut mbedtls_mpi,
        Q: *const mbedtls_ecp_point,
        d: *const mbedtls_mpi,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_init(ctx: *mut mbedtls_ecdh_context);
}
extern "C" {
    pub fn mbedtls_ecdh_setup(
        ctx: *mut mbedtls_ecdh_context,
        grp_id: mbedtls_ecp_group_id,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_free(ctx: *mut mbedtls_ecdh_context);
}
extern "C" {
    pub fn mbedtls_ecdh_make_params(
        ctx: *mut mbedtls_ecdh_context,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_read_params(
        ctx: *mut mbedtls_ecdh_context,
        buf: *mut *const ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_get_params(
        ctx: *mut mbedtls_ecdh_context,
        key: *const mbedtls_ecp_keypair,
        side: mbedtls_ecdh_side,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_make_public(
        ctx: *mut mbedtls_ecdh_context,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_read_public(
        ctx: *mut mbedtls_ecdh_context,
        buf: *const ::std::os::raw::c_uchar,
        blen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdh_calc_secret(
        ctx: *mut mbedtls_ecdh_context,
        olen: *mut usize,
        buf: *mut ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const mbedtls_md_type_t_MBEDTLS_MD_NONE: mbedtls_md_type_t = 0;
pub const mbedtls_md_type_t_MBEDTLS_MD_MD2: mbedtls_md_type_t = 1;
pub const mbedtls_md_type_t_MBEDTLS_MD_MD4: mbedtls_md_type_t = 2;
pub const mbedtls_md_type_t_MBEDTLS_MD_MD5: mbedtls_md_type_t = 3;
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA1: mbedtls_md_type_t = 4;
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA224: mbedtls_md_type_t = 5;
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA256: mbedtls_md_type_t = 6;
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA384: mbedtls_md_type_t = 7;
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA512: mbedtls_md_type_t = 8;
pub const mbedtls_md_type_t_MBEDTLS_MD_RIPEMD160: mbedtls_md_type_t = 9;
pub type mbedtls_md_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_md_info_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_md_context_t {
    pub md_info: *const mbedtls_md_info_t,
    pub md_ctx: *mut ::std::os::raw::c_void,
    pub hmac_ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mbedtls_md_context_t() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_md_context_t>(),
        24usize,
        concat!("Size of: ", stringify!(mbedtls_md_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_md_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_md_context_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md_context_t>())).md_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md_context_t),
            "::",
            stringify!(md_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md_context_t>())).md_ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md_context_t),
            "::",
            stringify!(md_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md_context_t>())).hmac_ctx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md_context_t),
            "::",
            stringify!(hmac_ctx)
        )
    );
}
extern "C" {
    pub fn mbedtls_md_list() -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_info_from_string(
        md_name: *const ::std::os::raw::c_char,
    ) -> *const mbedtls_md_info_t;
}
extern "C" {
    pub fn mbedtls_md_info_from_type(md_type: mbedtls_md_type_t) -> *const mbedtls_md_info_t;
}
extern "C" {
    pub fn mbedtls_md_init(ctx: *mut mbedtls_md_context_t);
}
extern "C" {
    pub fn mbedtls_md_free(ctx: *mut mbedtls_md_context_t);
}
extern "C" {
    pub fn mbedtls_md_setup(
        ctx: *mut mbedtls_md_context_t,
        md_info: *const mbedtls_md_info_t,
        hmac: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_clone(
        dst: *mut mbedtls_md_context_t,
        src: *const mbedtls_md_context_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_get_size(md_info: *const mbedtls_md_info_t) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn mbedtls_md_get_type(md_info: *const mbedtls_md_info_t) -> mbedtls_md_type_t;
}
extern "C" {
    pub fn mbedtls_md_get_name(md_info: *const mbedtls_md_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mbedtls_md_starts(ctx: *mut mbedtls_md_context_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_update(
        ctx: *mut mbedtls_md_context_t,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_finish(
        ctx: *mut mbedtls_md_context_t,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md(
        md_info: *const mbedtls_md_info_t,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_hmac_starts(
        ctx: *mut mbedtls_md_context_t,
        key: *const ::std::os::raw::c_uchar,
        keylen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_hmac_update(
        ctx: *mut mbedtls_md_context_t,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_hmac_finish(
        ctx: *mut mbedtls_md_context_t,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_hmac_reset(ctx: *mut mbedtls_md_context_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_hmac(
        md_info: *const mbedtls_md_info_t,
        key: *const ::std::os::raw::c_uchar,
        keylen: usize,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md_process(
        ctx: *mut mbedtls_md_context_t,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
pub type mbedtls_ecdsa_context = mbedtls_ecp_keypair;
pub type mbedtls_ecdsa_restart_ctx = ::std::os::raw::c_void;
extern "C" {
    pub fn mbedtls_ecdsa_can_do(gid: mbedtls_ecp_group_id) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_sign(
        grp: *mut mbedtls_ecp_group,
        r: *mut mbedtls_mpi,
        s: *mut mbedtls_mpi,
        d: *const mbedtls_mpi,
        buf: *const ::std::os::raw::c_uchar,
        blen: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_sign_det_ext(
        grp: *mut mbedtls_ecp_group,
        r: *mut mbedtls_mpi,
        s: *mut mbedtls_mpi,
        d: *const mbedtls_mpi,
        buf: *const ::std::os::raw::c_uchar,
        blen: usize,
        md_alg: mbedtls_md_type_t,
        f_rng_blind: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng_blind: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_verify(
        grp: *mut mbedtls_ecp_group,
        buf: *const ::std::os::raw::c_uchar,
        blen: usize,
        Q: *const mbedtls_ecp_point,
        r: *const mbedtls_mpi,
        s: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_write_signature(
        ctx: *mut mbedtls_ecdsa_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hlen: usize,
        sig: *mut ::std::os::raw::c_uchar,
        slen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_write_signature_restartable(
        ctx: *mut mbedtls_ecdsa_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hlen: usize,
        sig: *mut ::std::os::raw::c_uchar,
        slen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        rs_ctx: *mut mbedtls_ecdsa_restart_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_read_signature(
        ctx: *mut mbedtls_ecdsa_context,
        hash: *const ::std::os::raw::c_uchar,
        hlen: usize,
        sig: *const ::std::os::raw::c_uchar,
        slen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_read_signature_restartable(
        ctx: *mut mbedtls_ecdsa_context,
        hash: *const ::std::os::raw::c_uchar,
        hlen: usize,
        sig: *const ::std::os::raw::c_uchar,
        slen: usize,
        rs_ctx: *mut mbedtls_ecdsa_restart_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_genkey(
        ctx: *mut mbedtls_ecdsa_context,
        gid: mbedtls_ecp_group_id,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_from_keypair(
        ctx: *mut mbedtls_ecdsa_context,
        key: *const mbedtls_ecp_keypair,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecdsa_init(ctx: *mut mbedtls_ecdsa_context);
}
extern "C" {
    pub fn mbedtls_ecdsa_free(ctx: *mut mbedtls_ecdsa_context);
}
pub const mbedtls_ecjpake_role_MBEDTLS_ECJPAKE_CLIENT: mbedtls_ecjpake_role = 0;
pub const mbedtls_ecjpake_role_MBEDTLS_ECJPAKE_SERVER: mbedtls_ecjpake_role = 1;
pub type mbedtls_ecjpake_role = ::std::os::raw::c_uint;
#[repr(C)]
pub struct mbedtls_ecjpake_context {
    pub md_info: *const mbedtls_md_info_t,
    pub grp: mbedtls_ecp_group,
    pub role: mbedtls_ecjpake_role,
    pub point_format: ::std::os::raw::c_int,
    pub Xm1: mbedtls_ecp_point,
    pub Xm2: mbedtls_ecp_point,
    pub Xp1: mbedtls_ecp_point,
    pub Xp2: mbedtls_ecp_point,
    pub Xp: mbedtls_ecp_point,
    pub xm1: mbedtls_mpi,
    pub xm2: mbedtls_mpi,
    pub s: mbedtls_mpi,
}
#[test]
fn bindgen_test_layout_mbedtls_ecjpake_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ecjpake_context>(),
        696usize,
        concat!("Size of: ", stringify!(mbedtls_ecjpake_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ecjpake_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_ecjpake_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).md_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(md_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).grp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(grp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).role as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).point_format as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(point_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).Xm1 as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(Xm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).Xm2 as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(Xm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).Xp1 as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(Xp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).Xp2 as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(Xp2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).Xp as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(Xp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).xm1 as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(xm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).xm2 as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(xm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ecjpake_context>())).s as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ecjpake_context),
            "::",
            stringify!(s)
        )
    );
}
extern "C" {
    pub fn mbedtls_ecjpake_init(ctx: *mut mbedtls_ecjpake_context);
}
extern "C" {
    pub fn mbedtls_ecjpake_setup(
        ctx: *mut mbedtls_ecjpake_context,
        role: mbedtls_ecjpake_role,
        hash: mbedtls_md_type_t,
        curve: mbedtls_ecp_group_id,
        secret: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_check(ctx: *const mbedtls_ecjpake_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_write_round_one(
        ctx: *mut mbedtls_ecjpake_context,
        buf: *mut ::std::os::raw::c_uchar,
        len: usize,
        olen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_read_round_one(
        ctx: *mut mbedtls_ecjpake_context,
        buf: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_write_round_two(
        ctx: *mut mbedtls_ecjpake_context,
        buf: *mut ::std::os::raw::c_uchar,
        len: usize,
        olen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_read_round_two(
        ctx: *mut mbedtls_ecjpake_context,
        buf: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_derive_secret(
        ctx: *mut mbedtls_ecjpake_context,
        buf: *mut ::std::os::raw::c_uchar,
        len: usize,
        olen: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ecjpake_free(ctx: *mut mbedtls_ecjpake_context);
}
extern "C" {
    pub fn mbedtls_ecjpake_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_sha512_context {
    pub total: [u64; 2usize],
    pub state: [u64; 8usize],
    pub buffer: [::std::os::raw::c_uchar; 128usize],
    pub is384: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_sha512_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_sha512_context>(),
        216usize,
        concat!("Size of: ", stringify!(mbedtls_sha512_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_sha512_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_sha512_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha512_context>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha512_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha512_context>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha512_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha512_context>())).buffer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha512_context),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha512_context>())).is384 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha512_context),
            "::",
            stringify!(is384)
        )
    );
}
extern "C" {
    pub fn mbedtls_sha512_init(ctx: *mut mbedtls_sha512_context);
}
extern "C" {
    pub fn mbedtls_sha512_free(ctx: *mut mbedtls_sha512_context);
}
extern "C" {
    pub fn mbedtls_sha512_clone(
        dst: *mut mbedtls_sha512_context,
        src: *const mbedtls_sha512_context,
    );
}
extern "C" {
    pub fn mbedtls_sha512_starts_ret(
        ctx: *mut mbedtls_sha512_context,
        is384: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha512_update_ret(
        ctx: *mut mbedtls_sha512_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha512_finish_ret(
        ctx: *mut mbedtls_sha512_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_sha512_process(
        ctx: *mut mbedtls_sha512_context,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha512_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        is384: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha512_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type mbedtls_entropy_f_source_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        len: usize,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
pub struct mbedtls_entropy_source_state {
    pub f_source: mbedtls_entropy_f_source_ptr,
    pub p_source: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub threshold: usize,
    pub strong: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_entropy_source_state() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_entropy_source_state>(),
        40usize,
        concat!("Size of: ", stringify!(mbedtls_entropy_source_state))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_entropy_source_state>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_entropy_source_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_source_state>())).f_source as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_source_state),
            "::",
            stringify!(f_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_source_state>())).p_source as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_source_state),
            "::",
            stringify!(p_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_source_state>())).size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_source_state),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_source_state>())).threshold as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_source_state),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_source_state>())).strong as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_source_state),
            "::",
            stringify!(strong)
        )
    );
}
#[repr(C)]
pub struct mbedtls_entropy_context {
    pub accumulator_started: ::std::os::raw::c_int,
    pub accumulator: mbedtls_sha512_context,
    pub source_count: ::std::os::raw::c_int,
    pub source: [mbedtls_entropy_source_state; 20usize],
}
#[test]
fn bindgen_test_layout_mbedtls_entropy_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_entropy_context>(),
        1032usize,
        concat!("Size of: ", stringify!(mbedtls_entropy_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_entropy_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_entropy_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_context>())).accumulator_started as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_context),
            "::",
            stringify!(accumulator_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_context>())).accumulator as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_context),
            "::",
            stringify!(accumulator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_entropy_context>())).source_count as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_context),
            "::",
            stringify!(source_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_entropy_context>())).source as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_entropy_context),
            "::",
            stringify!(source)
        )
    );
}
extern "C" {
    pub fn mbedtls_entropy_init(ctx: *mut mbedtls_entropy_context);
}
extern "C" {
    pub fn mbedtls_entropy_free(ctx: *mut mbedtls_entropy_context);
}
extern "C" {
    pub fn mbedtls_entropy_add_source(
        ctx: *mut mbedtls_entropy_context,
        f_source: mbedtls_entropy_f_source_ptr,
        p_source: *mut ::std::os::raw::c_void,
        threshold: usize,
        strong: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_entropy_gather(ctx: *mut mbedtls_entropy_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_entropy_func(
        data: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_entropy_update_manual(
        ctx: *mut mbedtls_entropy_context,
        data: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_entropy_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_platform_entropy_poll(
        data: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        len: usize,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_strerror(
        errnum: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    );
}
extern "C" {
    pub fn mbedtls_high_level_strerr(
        error_code: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mbedtls_low_level_strerr(
        error_code: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct mbedtls_gcm_context {
    pub cipher_ctx: mbedtls_cipher_context_t,
    pub HL: [u64; 16usize],
    pub HH: [u64; 16usize],
    pub len: u64,
    pub add_len: u64,
    pub base_ectr: [::std::os::raw::c_uchar; 16usize],
    pub y: [::std::os::raw::c_uchar; 16usize],
    pub buf: [::std::os::raw::c_uchar; 16usize],
    pub mode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_gcm_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_gcm_context>(),
        424usize,
        concat!("Size of: ", stringify!(mbedtls_gcm_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_gcm_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_gcm_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).cipher_ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(cipher_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).HL as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(HL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).HH as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(HH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).len as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).add_len as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(add_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).base_ectr as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(base_ectr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).y as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).buf as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_gcm_context>())).mode as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_gcm_context),
            "::",
            stringify!(mode)
        )
    );
}
extern "C" {
    pub fn mbedtls_gcm_init(ctx: *mut mbedtls_gcm_context);
}
extern "C" {
    pub fn mbedtls_gcm_setkey(
        ctx: *mut mbedtls_gcm_context,
        cipher: mbedtls_cipher_id_t,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_gcm_crypt_and_tag(
        ctx: *mut mbedtls_gcm_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        tag_len: usize,
        tag: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_gcm_auth_decrypt(
        ctx: *mut mbedtls_gcm_context,
        length: usize,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
        tag: *const ::std::os::raw::c_uchar,
        tag_len: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_gcm_starts(
        ctx: *mut mbedtls_gcm_context,
        mode: ::std::os::raw::c_int,
        iv: *const ::std::os::raw::c_uchar,
        iv_len: usize,
        add: *const ::std::os::raw::c_uchar,
        add_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_gcm_update(
        ctx: *mut mbedtls_gcm_context,
        length: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_gcm_finish(
        ctx: *mut mbedtls_gcm_context,
        tag: *mut ::std::os::raw::c_uchar,
        tag_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_gcm_free(ctx: *mut mbedtls_gcm_context);
}
extern "C" {
    pub fn mbedtls_gcm_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hkdf(
        md: *const mbedtls_md_info_t,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: usize,
        ikm: *const ::std::os::raw::c_uchar,
        ikm_len: usize,
        info: *const ::std::os::raw::c_uchar,
        info_len: usize,
        okm: *mut ::std::os::raw::c_uchar,
        okm_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hkdf_extract(
        md: *const mbedtls_md_info_t,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: usize,
        ikm: *const ::std::os::raw::c_uchar,
        ikm_len: usize,
        prk: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hkdf_expand(
        md: *const mbedtls_md_info_t,
        prk: *const ::std::os::raw::c_uchar,
        prk_len: usize,
        info: *const ::std::os::raw::c_uchar,
        info_len: usize,
        okm: *mut ::std::os::raw::c_uchar,
        okm_len: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_hmac_drbg_context {
    pub md_ctx: mbedtls_md_context_t,
    pub V: [::std::os::raw::c_uchar; 64usize],
    pub reseed_counter: ::std::os::raw::c_int,
    pub entropy_len: usize,
    pub prediction_resistance: ::std::os::raw::c_int,
    pub reseed_interval: ::std::os::raw::c_int,
    pub f_entropy: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_uchar,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub p_entropy: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mbedtls_hmac_drbg_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_hmac_drbg_context>(),
        128usize,
        concat!("Size of: ", stringify!(mbedtls_hmac_drbg_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_hmac_drbg_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_hmac_drbg_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).md_ctx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(md_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).V as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(V)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).reseed_counter as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(reseed_counter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).entropy_len as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(entropy_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).prediction_resistance as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(prediction_resistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).reseed_interval as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(reseed_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).f_entropy as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(f_entropy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_hmac_drbg_context>())).p_entropy as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_hmac_drbg_context),
            "::",
            stringify!(p_entropy)
        )
    );
}
extern "C" {
    pub fn mbedtls_hmac_drbg_init(ctx: *mut mbedtls_hmac_drbg_context);
}
extern "C" {
    pub fn mbedtls_hmac_drbg_seed(
        ctx: *mut mbedtls_hmac_drbg_context,
        md_info: *const mbedtls_md_info_t,
        f_entropy: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_entropy: *mut ::std::os::raw::c_void,
        custom: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hmac_drbg_seed_buf(
        ctx: *mut mbedtls_hmac_drbg_context,
        md_info: *const mbedtls_md_info_t,
        data: *const ::std::os::raw::c_uchar,
        data_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hmac_drbg_set_prediction_resistance(
        ctx: *mut mbedtls_hmac_drbg_context,
        resistance: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_hmac_drbg_set_entropy_len(ctx: *mut mbedtls_hmac_drbg_context, len: usize);
}
extern "C" {
    pub fn mbedtls_hmac_drbg_set_reseed_interval(
        ctx: *mut mbedtls_hmac_drbg_context,
        interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_hmac_drbg_update_ret(
        ctx: *mut mbedtls_hmac_drbg_context,
        additional: *const ::std::os::raw::c_uchar,
        add_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hmac_drbg_reseed(
        ctx: *mut mbedtls_hmac_drbg_context,
        additional: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hmac_drbg_random_with_add(
        p_rng: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        output_len: usize,
        additional: *const ::std::os::raw::c_uchar,
        add_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hmac_drbg_random(
        p_rng: *mut ::std::os::raw::c_void,
        output: *mut ::std::os::raw::c_uchar,
        out_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_hmac_drbg_free(ctx: *mut mbedtls_hmac_drbg_context);
}
extern "C" {
    pub fn mbedtls_hmac_drbg_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_md2_context {
    pub cksum: [::std::os::raw::c_uchar; 16usize],
    pub state: [::std::os::raw::c_uchar; 48usize],
    pub buffer: [::std::os::raw::c_uchar; 16usize],
    pub left: usize,
}
#[test]
fn bindgen_test_layout_mbedtls_md2_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_md2_context>(),
        88usize,
        concat!("Size of: ", stringify!(mbedtls_md2_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_md2_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_md2_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md2_context>())).cksum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md2_context),
            "::",
            stringify!(cksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md2_context>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md2_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md2_context>())).buffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md2_context),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md2_context>())).left as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md2_context),
            "::",
            stringify!(left)
        )
    );
}
extern "C" {
    pub fn mbedtls_md2_init(ctx: *mut mbedtls_md2_context);
}
extern "C" {
    pub fn mbedtls_md2_free(ctx: *mut mbedtls_md2_context);
}
extern "C" {
    pub fn mbedtls_md2_clone(dst: *mut mbedtls_md2_context, src: *const mbedtls_md2_context);
}
extern "C" {
    pub fn mbedtls_md2_starts_ret(ctx: *mut mbedtls_md2_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md2_update_ret(
        ctx: *mut mbedtls_md2_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md2_finish_ret(
        ctx: *mut mbedtls_md2_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_md2_process(ctx: *mut mbedtls_md2_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md2_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md2_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_md4_context {
    pub total: [u32; 2usize],
    pub state: [u32; 4usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_mbedtls_md4_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_md4_context>(),
        88usize,
        concat!("Size of: ", stringify!(mbedtls_md4_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_md4_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_md4_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md4_context>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md4_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md4_context>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md4_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md4_context>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md4_context),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn mbedtls_md4_init(ctx: *mut mbedtls_md4_context);
}
extern "C" {
    pub fn mbedtls_md4_free(ctx: *mut mbedtls_md4_context);
}
extern "C" {
    pub fn mbedtls_md4_clone(dst: *mut mbedtls_md4_context, src: *const mbedtls_md4_context);
}
extern "C" {
    pub fn mbedtls_md4_starts_ret(ctx: *mut mbedtls_md4_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md4_update_ret(
        ctx: *mut mbedtls_md4_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md4_finish_ret(
        ctx: *mut mbedtls_md4_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_md4_process(
        ctx: *mut mbedtls_md4_context,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md4_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md4_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_md5_context {
    pub total: [u32; 2usize],
    pub state: [u32; 4usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_mbedtls_md5_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_md5_context>(),
        88usize,
        concat!("Size of: ", stringify!(mbedtls_md5_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_md5_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_md5_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md5_context>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md5_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md5_context>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md5_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_md5_context>())).buffer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_md5_context),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn mbedtls_md5_init(ctx: *mut mbedtls_md5_context);
}
extern "C" {
    pub fn mbedtls_md5_free(ctx: *mut mbedtls_md5_context);
}
extern "C" {
    pub fn mbedtls_md5_clone(dst: *mut mbedtls_md5_context, src: *const mbedtls_md5_context);
}
extern "C" {
    pub fn mbedtls_md5_starts_ret(ctx: *mut mbedtls_md5_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md5_update_ret(
        ctx: *mut mbedtls_md5_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md5_finish_ret(
        ctx: *mut mbedtls_md5_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_md5_process(
        ctx: *mut mbedtls_md5_context,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md5_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_md5_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const mbedtls_nist_kw_mode_t_MBEDTLS_KW_MODE_KW: mbedtls_nist_kw_mode_t = 0;
pub const mbedtls_nist_kw_mode_t_MBEDTLS_KW_MODE_KWP: mbedtls_nist_kw_mode_t = 1;
pub type mbedtls_nist_kw_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct mbedtls_nist_kw_context {
    pub cipher_ctx: mbedtls_cipher_context_t,
}
#[test]
fn bindgen_test_layout_mbedtls_nist_kw_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_nist_kw_context>(),
        96usize,
        concat!("Size of: ", stringify!(mbedtls_nist_kw_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_nist_kw_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_nist_kw_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_nist_kw_context>())).cipher_ctx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_nist_kw_context),
            "::",
            stringify!(cipher_ctx)
        )
    );
}
extern "C" {
    pub fn mbedtls_nist_kw_init(ctx: *mut mbedtls_nist_kw_context);
}
extern "C" {
    pub fn mbedtls_nist_kw_setkey(
        ctx: *mut mbedtls_nist_kw_context,
        cipher: mbedtls_cipher_id_t,
        key: *const ::std::os::raw::c_uchar,
        keybits: ::std::os::raw::c_uint,
        is_wrap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_nist_kw_free(ctx: *mut mbedtls_nist_kw_context);
}
extern "C" {
    pub fn mbedtls_nist_kw_wrap(
        ctx: *mut mbedtls_nist_kw_context,
        mode: mbedtls_nist_kw_mode_t,
        input: *const ::std::os::raw::c_uchar,
        in_len: usize,
        output: *mut ::std::os::raw::c_uchar,
        out_len: *mut usize,
        out_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_nist_kw_unwrap(
        ctx: *mut mbedtls_nist_kw_context,
        mode: mbedtls_nist_kw_mode_t,
        input: *const ::std::os::raw::c_uchar,
        in_len: usize,
        output: *mut ::std::os::raw::c_uchar,
        out_len: *mut usize,
        out_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_nist_kw_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_rsa_context {
    pub ver: ::std::os::raw::c_int,
    pub len: usize,
    pub N: mbedtls_mpi,
    pub E: mbedtls_mpi,
    pub D: mbedtls_mpi,
    pub P: mbedtls_mpi,
    pub Q: mbedtls_mpi,
    pub DP: mbedtls_mpi,
    pub DQ: mbedtls_mpi,
    pub QP: mbedtls_mpi,
    pub RN: mbedtls_mpi,
    pub RP: mbedtls_mpi,
    pub RQ: mbedtls_mpi,
    pub Vi: mbedtls_mpi,
    pub Vf: mbedtls_mpi,
    pub padding: ::std::os::raw::c_int,
    pub hash_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_rsa_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_rsa_context>(),
        336usize,
        concat!("Size of: ", stringify!(mbedtls_rsa_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_rsa_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_rsa_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).ver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).N as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).E as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).D as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(D)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).P as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).Q as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(Q)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).DP as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(DP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).DQ as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(DQ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).QP as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(QP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).RN as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(RN)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).RP as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(RP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).RQ as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(RQ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).Vi as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(Vi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).Vf as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(Vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).padding as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_rsa_context>())).hash_id as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_rsa_context),
            "::",
            stringify!(hash_id)
        )
    );
}
extern "C" {
    pub fn mbedtls_rsa_init(
        ctx: *mut mbedtls_rsa_context,
        padding: ::std::os::raw::c_int,
        hash_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_rsa_import(
        ctx: *mut mbedtls_rsa_context,
        N: *const mbedtls_mpi,
        P: *const mbedtls_mpi,
        Q: *const mbedtls_mpi,
        D: *const mbedtls_mpi,
        E: *const mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_import_raw(
        ctx: *mut mbedtls_rsa_context,
        N: *const ::std::os::raw::c_uchar,
        N_len: usize,
        P: *const ::std::os::raw::c_uchar,
        P_len: usize,
        Q: *const ::std::os::raw::c_uchar,
        Q_len: usize,
        D: *const ::std::os::raw::c_uchar,
        D_len: usize,
        E: *const ::std::os::raw::c_uchar,
        E_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_complete(ctx: *mut mbedtls_rsa_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_export(
        ctx: *const mbedtls_rsa_context,
        N: *mut mbedtls_mpi,
        P: *mut mbedtls_mpi,
        Q: *mut mbedtls_mpi,
        D: *mut mbedtls_mpi,
        E: *mut mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_export_raw(
        ctx: *const mbedtls_rsa_context,
        N: *mut ::std::os::raw::c_uchar,
        N_len: usize,
        P: *mut ::std::os::raw::c_uchar,
        P_len: usize,
        Q: *mut ::std::os::raw::c_uchar,
        Q_len: usize,
        D: *mut ::std::os::raw::c_uchar,
        D_len: usize,
        E: *mut ::std::os::raw::c_uchar,
        E_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_export_crt(
        ctx: *const mbedtls_rsa_context,
        DP: *mut mbedtls_mpi,
        DQ: *mut mbedtls_mpi,
        QP: *mut mbedtls_mpi,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_set_padding(
        ctx: *mut mbedtls_rsa_context,
        padding: ::std::os::raw::c_int,
        hash_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mbedtls_rsa_get_len(ctx: *const mbedtls_rsa_context) -> usize;
}
extern "C" {
    pub fn mbedtls_rsa_gen_key(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        nbits: ::std::os::raw::c_uint,
        exponent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_check_pubkey(ctx: *const mbedtls_rsa_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_check_privkey(ctx: *const mbedtls_rsa_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_check_pub_priv(
        pub_: *const mbedtls_rsa_context,
        prv: *const mbedtls_rsa_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_public(
        ctx: *mut mbedtls_rsa_context,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_private(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_pkcs1_encrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        ilen: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsaes_pkcs1_v15_encrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        ilen: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsaes_oaep_encrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_uchar,
        label_len: usize,
        ilen: usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_pkcs1_decrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        olen: *mut usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        output_max_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsaes_pkcs1_v15_decrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        olen: *mut usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        output_max_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsaes_oaep_decrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        label: *const ::std::os::raw::c_uchar,
        label_len: usize,
        olen: *mut usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        output_max_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_pkcs1_sign(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsassa_pkcs1_v15_sign(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsassa_pss_sign(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_pkcs1_verify(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsassa_pkcs1_v15_verify(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsassa_pss_verify(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_rsassa_pss_verify_ext(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        mgf1_hash_id: mbedtls_md_type_t,
        expected_salt_len: ::std::os::raw::c_int,
        sig: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_copy(
        dst: *mut mbedtls_rsa_context,
        src: *const mbedtls_rsa_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_rsa_free(ctx: *mut mbedtls_rsa_context);
}
extern "C" {
    pub fn mbedtls_rsa_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const mbedtls_pk_type_t_MBEDTLS_PK_NONE: mbedtls_pk_type_t = 0;
pub const mbedtls_pk_type_t_MBEDTLS_PK_RSA: mbedtls_pk_type_t = 1;
pub const mbedtls_pk_type_t_MBEDTLS_PK_ECKEY: mbedtls_pk_type_t = 2;
pub const mbedtls_pk_type_t_MBEDTLS_PK_ECKEY_DH: mbedtls_pk_type_t = 3;
pub const mbedtls_pk_type_t_MBEDTLS_PK_ECDSA: mbedtls_pk_type_t = 4;
pub const mbedtls_pk_type_t_MBEDTLS_PK_RSA_ALT: mbedtls_pk_type_t = 5;
pub const mbedtls_pk_type_t_MBEDTLS_PK_RSASSA_PSS: mbedtls_pk_type_t = 6;
pub const mbedtls_pk_type_t_MBEDTLS_PK_OPAQUE: mbedtls_pk_type_t = 7;
pub type mbedtls_pk_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_rsassa_pss_options {
    pub mgf1_hash_id: mbedtls_md_type_t,
    pub expected_salt_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_pk_rsassa_pss_options() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_pk_rsassa_pss_options>(),
        8usize,
        concat!("Size of: ", stringify!(mbedtls_pk_rsassa_pss_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_pk_rsassa_pss_options>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_pk_rsassa_pss_options))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_pk_rsassa_pss_options>())).mgf1_hash_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_rsassa_pss_options),
            "::",
            stringify!(mgf1_hash_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_pk_rsassa_pss_options>())).expected_salt_len as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_rsassa_pss_options),
            "::",
            stringify!(expected_salt_len)
        )
    );
}
pub const mbedtls_pk_debug_type_MBEDTLS_PK_DEBUG_NONE: mbedtls_pk_debug_type = 0;
pub const mbedtls_pk_debug_type_MBEDTLS_PK_DEBUG_MPI: mbedtls_pk_debug_type = 1;
pub const mbedtls_pk_debug_type_MBEDTLS_PK_DEBUG_ECP: mbedtls_pk_debug_type = 2;
pub type mbedtls_pk_debug_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_debug_item {
    pub type_: mbedtls_pk_debug_type,
    pub name: *const ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mbedtls_pk_debug_item() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_pk_debug_item>(),
        24usize,
        concat!("Size of: ", stringify!(mbedtls_pk_debug_item))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_pk_debug_item>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_pk_debug_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pk_debug_item>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_debug_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pk_debug_item>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_debug_item),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pk_debug_item>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_debug_item),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_info_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_context {
    pub pk_info: *const mbedtls_pk_info_t,
    pub pk_ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mbedtls_pk_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_pk_context>(),
        16usize,
        concat!("Size of: ", stringify!(mbedtls_pk_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_pk_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_pk_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pk_context>())).pk_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_context),
            "::",
            stringify!(pk_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pk_context>())).pk_ctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pk_context),
            "::",
            stringify!(pk_ctx)
        )
    );
}
pub type mbedtls_pk_restart_ctx = ::std::os::raw::c_void;
pub type mbedtls_pk_rsa_alt_decrypt_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        olen: *mut usize,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        output_max_len: usize,
    ) -> ::std::os::raw::c_int,
>;
pub type mbedtls_pk_rsa_alt_sign_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: ::std::os::raw::c_uint,
        hash: *const ::std::os::raw::c_uchar,
        sig: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int,
>;
pub type mbedtls_pk_rsa_alt_key_len_func =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> usize>;
extern "C" {
    pub fn mbedtls_pk_info_from_type(pk_type: mbedtls_pk_type_t) -> *const mbedtls_pk_info_t;
}
extern "C" {
    pub fn mbedtls_pk_init(ctx: *mut mbedtls_pk_context);
}
extern "C" {
    pub fn mbedtls_pk_free(ctx: *mut mbedtls_pk_context);
}
extern "C" {
    pub fn mbedtls_pk_setup(
        ctx: *mut mbedtls_pk_context,
        info: *const mbedtls_pk_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_setup_rsa_alt(
        ctx: *mut mbedtls_pk_context,
        key: *mut ::std::os::raw::c_void,
        decrypt_func: mbedtls_pk_rsa_alt_decrypt_func,
        sign_func: mbedtls_pk_rsa_alt_sign_func,
        key_len_func: mbedtls_pk_rsa_alt_key_len_func,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_get_bitlen(ctx: *const mbedtls_pk_context) -> usize;
}
extern "C" {
    pub fn mbedtls_pk_can_do(
        ctx: *const mbedtls_pk_context,
        type_: mbedtls_pk_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_verify(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hash_len: usize,
        sig: *const ::std::os::raw::c_uchar,
        sig_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_verify_restartable(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hash_len: usize,
        sig: *const ::std::os::raw::c_uchar,
        sig_len: usize,
        rs_ctx: *mut mbedtls_pk_restart_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_verify_ext(
        type_: mbedtls_pk_type_t,
        options: *const ::std::os::raw::c_void,
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hash_len: usize,
        sig: *const ::std::os::raw::c_uchar,
        sig_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_sign(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hash_len: usize,
        sig: *mut ::std::os::raw::c_uchar,
        sig_len: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_sign_restartable(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const ::std::os::raw::c_uchar,
        hash_len: usize,
        sig: *mut ::std::os::raw::c_uchar,
        sig_len: *mut usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
        rs_ctx: *mut mbedtls_pk_restart_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_decrypt(
        ctx: *mut mbedtls_pk_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        olen: *mut usize,
        osize: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_encrypt(
        ctx: *mut mbedtls_pk_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        olen: *mut usize,
        osize: usize,
        f_rng: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: usize,
            ) -> ::std::os::raw::c_int,
        >,
        p_rng: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_check_pair(
        pub_: *const mbedtls_pk_context,
        prv: *const mbedtls_pk_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_debug(
        ctx: *const mbedtls_pk_context,
        items: *mut mbedtls_pk_debug_item,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_get_name(ctx: *const mbedtls_pk_context) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mbedtls_pk_get_type(ctx: *const mbedtls_pk_context) -> mbedtls_pk_type_t;
}
extern "C" {
    pub fn mbedtls_pk_parse_key(
        ctx: *mut mbedtls_pk_context,
        key: *const ::std::os::raw::c_uchar,
        keylen: usize,
        pwd: *const ::std::os::raw::c_uchar,
        pwdlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_parse_public_key(
        ctx: *mut mbedtls_pk_context,
        key: *const ::std::os::raw::c_uchar,
        keylen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_write_key_der(
        ctx: *mut mbedtls_pk_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_write_pubkey_der(
        ctx: *mut mbedtls_pk_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_write_pubkey_pem(
        ctx: *mut mbedtls_pk_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_write_key_pem(
        ctx: *mut mbedtls_pk_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_parse_subpubkey(
        p: *mut *mut ::std::os::raw::c_uchar,
        end: *const ::std::os::raw::c_uchar,
        pk: *mut mbedtls_pk_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pk_write_pubkey(
        p: *mut *mut ::std::os::raw::c_uchar,
        start: *mut ::std::os::raw::c_uchar,
        key: *const mbedtls_pk_context,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_oid_descriptor_t {
    pub asn1: *const ::std::os::raw::c_char,
    pub asn1_len: usize,
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mbedtls_oid_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_oid_descriptor_t>(),
        32usize,
        concat!("Size of: ", stringify!(mbedtls_oid_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_oid_descriptor_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_oid_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_oid_descriptor_t>())).asn1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_oid_descriptor_t),
            "::",
            stringify!(asn1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_oid_descriptor_t>())).asn1_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_oid_descriptor_t),
            "::",
            stringify!(asn1_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_oid_descriptor_t>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_oid_descriptor_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_oid_descriptor_t>())).description as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_oid_descriptor_t),
            "::",
            stringify!(description)
        )
    );
}
extern "C" {
    pub fn mbedtls_oid_get_numeric_string(
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        oid: *const mbedtls_asn1_buf,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_x509_ext_type(
        oid: *const mbedtls_asn1_buf,
        ext_type: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_attr_short_name(
        oid: *const mbedtls_asn1_buf,
        short_name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_pk_alg(
        oid: *const mbedtls_asn1_buf,
        pk_alg: *mut mbedtls_pk_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_oid_by_pk_alg(
        pk_alg: mbedtls_pk_type_t,
        oid: *mut *const ::std::os::raw::c_char,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_ec_grp(
        oid: *const mbedtls_asn1_buf,
        grp_id: *mut mbedtls_ecp_group_id,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_oid_by_ec_grp(
        grp_id: mbedtls_ecp_group_id,
        oid: *mut *const ::std::os::raw::c_char,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_sig_alg(
        oid: *const mbedtls_asn1_buf,
        md_alg: *mut mbedtls_md_type_t,
        pk_alg: *mut mbedtls_pk_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_sig_alg_desc(
        oid: *const mbedtls_asn1_buf,
        desc: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_oid_by_sig_alg(
        pk_alg: mbedtls_pk_type_t,
        md_alg: mbedtls_md_type_t,
        oid: *mut *const ::std::os::raw::c_char,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_md_alg(
        oid: *const mbedtls_asn1_buf,
        md_alg: *mut mbedtls_md_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_md_hmac(
        oid: *const mbedtls_asn1_buf,
        md_hmac: *mut mbedtls_md_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_extended_key_usage(
        oid: *const mbedtls_asn1_buf,
        desc: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_certificate_policies(
        oid: *const mbedtls_asn1_buf,
        desc: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_oid_by_md(
        md_alg: mbedtls_md_type_t,
        oid: *mut *const ::std::os::raw::c_char,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_cipher_alg(
        oid: *const mbedtls_asn1_buf,
        cipher_alg: *mut mbedtls_cipher_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_oid_get_pkcs12_pbe_alg(
        oid: *const mbedtls_asn1_buf,
        md_alg: *mut mbedtls_md_type_t,
        cipher_alg: *mut mbedtls_cipher_type_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_pem_context {
    pub buf: *mut ::std::os::raw::c_uchar,
    pub buflen: usize,
    pub info: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_mbedtls_pem_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_pem_context>(),
        24usize,
        concat!("Size of: ", stringify!(mbedtls_pem_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_pem_context>(),
        8usize,
        concat!("Alignment of ", stringify!(mbedtls_pem_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pem_context>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pem_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pem_context>())).buflen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pem_context),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_pem_context>())).info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_pem_context),
            "::",
            stringify!(info)
        )
    );
}
extern "C" {
    pub fn mbedtls_pem_init(ctx: *mut mbedtls_pem_context);
}
extern "C" {
    pub fn mbedtls_pem_read_buffer(
        ctx: *mut mbedtls_pem_context,
        header: *const ::std::os::raw::c_char,
        footer: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        pwd: *const ::std::os::raw::c_uchar,
        pwdlen: usize,
        use_len: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pem_free(ctx: *mut mbedtls_pem_context);
}
extern "C" {
    pub fn mbedtls_pem_write_buffer(
        header: *const ::std::os::raw::c_char,
        footer: *const ::std::os::raw::c_char,
        der_data: *const ::std::os::raw::c_uchar,
        der_len: usize,
        buf: *mut ::std::os::raw::c_uchar,
        buf_len: usize,
        olen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pkcs12_pbe_sha1_rc4_128(
        pbe_params: *mut mbedtls_asn1_buf,
        mode: ::std::os::raw::c_int,
        pwd: *const ::std::os::raw::c_uchar,
        pwdlen: usize,
        input: *const ::std::os::raw::c_uchar,
        len: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pkcs12_pbe(
        pbe_params: *mut mbedtls_asn1_buf,
        mode: ::std::os::raw::c_int,
        cipher_type: mbedtls_cipher_type_t,
        md_type: mbedtls_md_type_t,
        pwd: *const ::std::os::raw::c_uchar,
        pwdlen: usize,
        input: *const ::std::os::raw::c_uchar,
        len: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pkcs12_derivation(
        data: *mut ::std::os::raw::c_uchar,
        datalen: usize,
        pwd: *const ::std::os::raw::c_uchar,
        pwdlen: usize,
        salt: *const ::std::os::raw::c_uchar,
        saltlen: usize,
        mbedtls_md: mbedtls_md_type_t,
        id: ::std::os::raw::c_int,
        iterations: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pkcs5_pbes2(
        pbe_params: *const mbedtls_asn1_buf,
        mode: ::std::os::raw::c_int,
        pwd: *const ::std::os::raw::c_uchar,
        pwdlen: usize,
        data: *const ::std::os::raw::c_uchar,
        datalen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pkcs5_pbkdf2_hmac(
        ctx: *mut mbedtls_md_context_t,
        password: *const ::std::os::raw::c_uchar,
        plen: usize,
        salt: *const ::std::os::raw::c_uchar,
        slen: usize,
        iteration_count: ::std::os::raw::c_uint,
        key_length: u32,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_pkcs5_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type time_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_platform_context {
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mbedtls_platform_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_platform_context>(),
        1usize,
        concat!("Size of: ", stringify!(mbedtls_platform_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_platform_context>(),
        1usize,
        concat!("Alignment of ", stringify!(mbedtls_platform_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_platform_context>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_platform_context),
            "::",
            stringify!(dummy)
        )
    );
}
extern "C" {
    pub fn mbedtls_platform_setup(ctx: *mut mbedtls_platform_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_platform_teardown(ctx: *mut mbedtls_platform_context);
}
pub type mbedtls_time_t = time_t;
#[repr(C)]
pub struct mbedtls_ripemd160_context {
    pub total: [u32; 2usize],
    pub state: [u32; 5usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_mbedtls_ripemd160_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_ripemd160_context>(),
        92usize,
        concat!("Size of: ", stringify!(mbedtls_ripemd160_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_ripemd160_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_ripemd160_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ripemd160_context>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ripemd160_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_ripemd160_context>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ripemd160_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mbedtls_ripemd160_context>())).buffer as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_ripemd160_context),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn mbedtls_ripemd160_init(ctx: *mut mbedtls_ripemd160_context);
}
extern "C" {
    pub fn mbedtls_ripemd160_free(ctx: *mut mbedtls_ripemd160_context);
}
extern "C" {
    pub fn mbedtls_ripemd160_clone(
        dst: *mut mbedtls_ripemd160_context,
        src: *const mbedtls_ripemd160_context,
    );
}
extern "C" {
    pub fn mbedtls_ripemd160_starts_ret(
        ctx: *mut mbedtls_ripemd160_context,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ripemd160_update_ret(
        ctx: *mut mbedtls_ripemd160_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ripemd160_finish_ret(
        ctx: *mut mbedtls_ripemd160_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_ripemd160_process(
        ctx: *mut mbedtls_ripemd160_context,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ripemd160_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_ripemd160_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_sha1_context {
    pub total: [u32; 2usize],
    pub state: [u32; 5usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_mbedtls_sha1_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_sha1_context>(),
        92usize,
        concat!("Size of: ", stringify!(mbedtls_sha1_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_sha1_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_sha1_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha1_context>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha1_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha1_context>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha1_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha1_context>())).buffer as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha1_context),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn mbedtls_sha1_init(ctx: *mut mbedtls_sha1_context);
}
extern "C" {
    pub fn mbedtls_sha1_free(ctx: *mut mbedtls_sha1_context);
}
extern "C" {
    pub fn mbedtls_sha1_clone(dst: *mut mbedtls_sha1_context, src: *const mbedtls_sha1_context);
}
extern "C" {
    pub fn mbedtls_sha1_starts_ret(ctx: *mut mbedtls_sha1_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha1_update_ret(
        ctx: *mut mbedtls_sha1_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha1_finish_ret(
        ctx: *mut mbedtls_sha1_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_sha1_process(
        ctx: *mut mbedtls_sha1_context,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha1_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha1_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_sha256_context {
    pub total: [u32; 2usize],
    pub state: [u32; 8usize],
    pub buffer: [::std::os::raw::c_uchar; 64usize],
    pub is224: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_sha256_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_sha256_context>(),
        108usize,
        concat!("Size of: ", stringify!(mbedtls_sha256_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_sha256_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_sha256_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha256_context>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha256_context>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha256_context>())).buffer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_sha256_context>())).is224 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(is224)
        )
    );
}
extern "C" {
    pub fn mbedtls_sha256_init(ctx: *mut mbedtls_sha256_context);
}
extern "C" {
    pub fn mbedtls_sha256_free(ctx: *mut mbedtls_sha256_context);
}
extern "C" {
    pub fn mbedtls_sha256_clone(
        dst: *mut mbedtls_sha256_context,
        src: *const mbedtls_sha256_context,
    );
}
extern "C" {
    pub fn mbedtls_sha256_starts_ret(
        ctx: *mut mbedtls_sha256_context,
        is224: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha256_update_ret(
        ctx: *mut mbedtls_sha256_context,
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha256_finish_ret(
        ctx: *mut mbedtls_sha256_context,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_internal_sha256_process(
        ctx: *mut mbedtls_sha256_context,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha256_ret(
        input: *const ::std::os::raw::c_uchar,
        ilen: usize,
        output: *mut ::std::os::raw::c_uchar,
        is224: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_sha256_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_version_get_number() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn mbedtls_version_get_string(string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mbedtls_version_get_string_full(string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn mbedtls_version_check_feature(
        feature: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct mbedtls_xtea_context {
    pub k: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_mbedtls_xtea_context() {
    assert_eq!(
        ::std::mem::size_of::<mbedtls_xtea_context>(),
        16usize,
        concat!("Size of: ", stringify!(mbedtls_xtea_context))
    );
    assert_eq!(
        ::std::mem::align_of::<mbedtls_xtea_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_xtea_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mbedtls_xtea_context>())).k as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_xtea_context),
            "::",
            stringify!(k)
        )
    );
}
extern "C" {
    pub fn mbedtls_xtea_init(ctx: *mut mbedtls_xtea_context);
}
extern "C" {
    pub fn mbedtls_xtea_free(ctx: *mut mbedtls_xtea_context);
}
extern "C" {
    pub fn mbedtls_xtea_setup(ctx: *mut mbedtls_xtea_context, key: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn mbedtls_xtea_crypt_ecb(
        ctx: *mut mbedtls_xtea_context,
        mode: ::std::os::raw::c_int,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_xtea_crypt_cbc(
        ctx: *mut mbedtls_xtea_context,
        mode: ::std::os::raw::c_int,
        length: usize,
        iv: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbedtls_xtea_self_test(verbose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
